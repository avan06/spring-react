// Generated by CoffeeScript 1.9.3
(function() {
  var rules;

  base.checkAndCreate("wObj");

  wObj.windowArray = [];

  wObj.maxWindow = -1;

  wObj.windowOpen = function(jspath) {
    var w;
    w = window.open(base_contextpath + jspath, '_blank', "");
    window.focus();
    wObj.maxWindow = wObj.maxWindow + 1;
    return wObj.windowArray[wObj.maxWindow] = w;
  };

  wObj.windowClose = function() {
    var i, j, ref;
    for (i = j = 0, ref = wObj.maxWindow; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (typeof wObj.windowArray[i] !== "undefined") {
        if (typeof wObj.windowArray[i].window === "object" && wObj.windowArray[i].window !== null) {
          wObj.windowArray[i].window.close();
        }
      }
    }
    return wObj.maxWindow = -1;
  };

  wObj.handleChange = function(e) {
    var jsx;
    jsx = wObj.application;
    return base.handleChange(jsx, e.target.name, e.target.value);
  };

  wObj.handleClick = function(e) {
    var jsx, name;
    jsx = wObj.application;
    name = e.target.name;
    if (name === "loginForm#CancelBtn") {
      jsx.setState({
        loginForm_isShow: false,
        loginForm: {
          loginId: "",
          password: ""
        }
      });
      return;
    }
    if (name === "loginForm#LoginBtn") {
      wObj.flux.actions.loginClick(jsx.state.loginForm);
      return;
    }
    if (name === "alert#CloseBtn") {
      wObj.flux.actions.base_alertHide();
      return;
    }
    if (name === "btnLogin") {
      if (jsx.state.page.logbtn === "LOGIN") {
        jsx.setState({
          loginForm_isShow: true
        });
        return;
      }
      wObj.windowClose();
      wObj.flux.actions.logoffClick();
      return;
    }
    if (jsx.state.page.name === "") {
      wObj.flux.actions.base_alertShow("Login していません");
      return;
    }
    if (name === "btnUser") {
      wObj.windowOpen("/user");
    }
    if (name === "btnUserin") {
      wObj.windowOpen("/userin");
    }
    if (name === "btnUsertab") {
      wObj.windowOpen("/usertab");
    }
    if (name === "btnUsertbl") {
      wObj.windowOpen("/usertbl");
    }
    if (name === "btnSystbl") {
      return wObj.windowOpen("/systbl");
    }
  };

  wObj.handleLoginKeyPress = function(e) {
    var jsx, key;
    jsx = wObj.application;
    key = e.key;
    if (e.key === "Enter") {
      return wObj.flux.actions.loginClick(jsx.state.loginForm);
    }
  };

  wObj.constants = {
    WObj_LOGIN_SUCCESS: "WObj_LOGIN_SUCCESS",
    WObj_LOGOFF_SUCCESS: "WObj_LOGOFF_SUCCESS"
  };

  rules = [];

  rules.push("required,loginId,loginIdは必須項目です");

  rules.push("required,password,psswordは必須項目です");

  wObj.actions = {
    loginClick: function(loginForm) {
      var res;
      res = rsv.validate(loginForm, rules);
      if (res.toString().length > 0) {
        this.dispatch(base.constants.base_ALERT_SHOW, res.toString());
        return;
      }
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson("/ajax/loginauth", loginForm, "application/json", base.ajaxCallback.bind(this, loginForm, wObj.constants.WObj_LOGIN_SUCCESS));
    },
    logoffClick: function() {
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson("/ajax/logout", "", "application/json", base.ajaxCallback.bind(this, "", wObj.constants.WObj_LOGOFF_SUCCESS));
    }
  };

  wObj.PageStore = Fluxxor.createStore({
    initialize: function() {
      this.data = {
        logbtn: "LOGIN",
        uid: "",
        name: ""
      };
      this.bindActions(wObj.constants.WObj_LOGIN_SUCCESS, this.onLoginSuccess, wObj.constants.WObj_LOGOFF_SUCCESS, this.onLogoffSuccess);
    },
    onLoginSuccess: function(res) {
      this.data.logbtn = "LOGOFF";
      this.data.uid = res.response.data.uid;
      this.data.name = res.response.data.name;
      this.emit("change");
      this.emit("loginComplete");
    },
    onLogoffSuccess: function(res) {
      this.data.logbtn = "LOGIN";
      this.data.uid = "";
      this.data.name = "";
      this.emit("change");
    }
  });

  wObj.flux = new Fluxxor.Flux();

  wObj.pageStore = new wObj.PageStore;

  wObj.flux.addStore("PAGE", wObj.pageStore);

  wObj.flux.addActions(wObj.actions);

  wObj.commonStore = new base.CommonStore;

  wObj.flux.addStore("COMMON", wObj.commonStore);

  wObj.flux.addActions(base.actions);

  wObj.FluxMixin = Fluxxor.FluxMixin(React);

  wObj.StoreWatchMixin = Fluxxor.StoreWatchMixin;

  wObj.pageStore.on("loginComplete", function() {
    return wObj.application.setState({
      loginForm_isShow: false,
      loginForm: {
        loginId: "",
        password: ""
      }
    });
  });

}).call(this);
