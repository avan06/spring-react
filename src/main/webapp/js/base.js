// Generated by CoffeeScript 1.9.3
(function() {
  var LoginClient, checkAndCreate;

  checkAndCreate = function(v) {
    if (window[v] == null) {
      return window[v] = {};
    }
  };

  checkAndCreate("base");

  base.checkAndCreate = checkAndCreate;

  base.handleChange = function(jsx, name, value) {
    var change, names, temp;
    change = {};
    names = name.split("#");
    if (names.length === 1) {
      change[name] = value;
    }
    if (names.length === 2) {
      temp = jsx.state[names[0]];
      temp[names[1]] = value;
      change[names[0]] = temp;
    }
    return jsx.setState(change);
  };

  base.constants = {
    base_ALERT_SHOW: "base_ALERT_SHOW",
    base_ALERT_HIDE: "base_ALERT_HIDE",
    base_DELETE_CFM_SHOW: "base_DELETE_CFM_SHOW",
    base_DELETE_CFM_HIDE: "base_DELETE_CFM_HIDE",
    base_LOADING: "base_LOADING",
    base_LOADED: "base_LOADED"
  };

  base.actions = {
    base_alertShow: function(message) {
      return this.dispatch(base.constants.base_ALERT_SHOW, message);
    },
    base_alertHide: function() {
      return this.dispatch(base.constants.base_ALERT_HIDE);
    },
    base_deleteCfmShow: function() {
      return this.dispatch(base.constants.base_DELETE_CFM_SHOW);
    },
    base_deleteCfmHide: function() {
      return this.dispatch(base.constants.base_DELETE_CFM_HIDE);
    }
  };

  LoginClient = {
    login: function(logbtn_value, success, failure) {
      return $.post;
    }
  };

  base.CommonStore = Fluxxor.createStore({
    initialize: function() {
      this.data = {
        alert: {
          message: "",
          isShow: false
        },
        deleteCfm: {
          isShow: false
        },
        loading: false
      };
      this.bindActions(base.constants.base_ALERT_SHOW, this.onAlertShow, base.constants.base_ALERT_HIDE, this.onAlertHide, base.constants.base_DELETE_CFM_SHOW, this.onDeleteCfmShow, base.constants.base_DELETE_CFM_HIDE, this.onDeleteCfmHide, base.constants.base_LOADING, this.onLoading, base.constants.base_LOADED, this.onLoaded);
    },
    onAlertShow: function(message) {
      this.data.alert.message = message;
      this.data.alert.isShow = true;
      this.emit("change");
    },
    onAlertHide: function() {
      this.data.alert.isShow = false;
      this.emit("change");
    },
    onDeleteCfmShow: function() {
      this.data.deleteCfm.isShow = true;
      this.emit("change");
    },
    onDeleteCfmHide: function() {
      this.data.deleteCfm.isShow = false;
      this.emit("change");
    },
    onLoading: function() {
      this.data.loading = true;
      this.emit("change");
    },
    onLoaded: function() {
      this.data.loading = false;
      this.emit("change");
    }
  });

  base.ajaxPost = function(url, data, contentype, callback) {
    return $.ajax({
      type: "POST",
      url: base_contextpath + url,
      data: data,
      contentType: contentype
    }).always(callback);
  };

  base.ajaxPostJson = function(url, param, contentype, callback) {
    var data;
    data = JSON.stringify(param);
    return base.ajaxPost(url, data, contentype, callback);
  };

  base.getXhr = function(response, payload) {
    if (typeof payload === "string") {
      return response;
    }
    return payload;
  };

  base.getServerError = function(xhr) {
    if (xhr.status === 200) {
      return "";
    }
    if (xhr.status === 0) {
      return "Internet or Server error";
    }
    return "Server error status=" + xhr.status + " " + xhr.statusText;
  };

  base.getResponse = function(xhr) {
    var res;
    if (typeof xhr.responseJSON === "object") {
      return xhr.responseJSON.response;
    }
    res = $.parseJSON(xhr.responseText);
    return res.response;
  };

  base.getAppError = function(xhr) {
    var response;
    response = base.getResponse(xhr);
    if (response != null) {
      if (response.status < 0) {
        return response.data;
      }
    }
    return "";
  };

  base.getServerOrAppError = function(xhr) {
    var error;
    error = base.getServerError(xhr);
    if (error > "") {
      return error;
    }
    return base.getAppError(xhr);
  };

  base.ajaxCallback = function(context, successDispatch, ajaxresponse, textStatus, payload) {
    var error, res, response, xhr;
    this.dispatch(base.constants.base_LOADED);
    xhr = base.getXhr(ajaxresponse, payload);
    error = base.getServerOrAppError(xhr);
    if (error > "") {
      this.dispatch(base.constants.base_ALERT_SHOW, error);
      return;
    }
    response = base.getResponse(xhr);
    res = {
      context: context,
      response: response
    };
    return this.dispatch(successDispatch, res);
  };

  base.createCriteria = function(form, fields) {
    var criteria, field, j, len;
    criteria = [];
    for (j = 0, len = fields.length; j < len; j++) {
      field = fields[j];
      criteria.push({
        fieldName: field,
        operator: form[field],
        start: form[field + "_s"],
        end: form[field + "_e"]
      });
    }
    return criteria;
  };

  base.rcdConstants = {
    base_RCD_FETCH_SUCCESS: "base_RCD_FETCH_SUCCESS",
    base_RCD_ADD_SUCCESS: "base_RCD_ADD_SUCCESS",
    base_RCD_UPDATE_SUCCESS: "base_RCD_UPDATE_SUCCESS",
    base_RCD_DELETE_SUCCESS: "base_RCD_DELETE_SUCCESS",
    base_RCD_TRANSACTIONS_SUCCESS: "base_RCD_TRANSACTIONS_SUCCESS"
  };

  base.rcdActions = {
    base_rcd_fetch: function(rcdData, form, table, criteria) {
      var context, params;
      params = {
        operationType: "fetch",
        data: {
          criteria: criteria
        }
      };
      context = {
        rcdData: rcdData,
        table: table,
        action: "fetch"
      };
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson(rcdData.url, params, "application/json", base.ajaxCallback.bind(this, context, base.rcdConstants.base_RCD_FETCH_SUCCESS));
    },
    base_rcd_update: function(rcdData, form, table) {
      var context, dispachAction, operationType, params;
      if (form.id === "") {
        dispachAction = base.rcdConstants.base_RCD_ADD_SUCCESS;
        operationType = "add";
      } else {
        dispachAction = base.rcdConstants.base_RCD_UPDATE_SUCCESS;
        operationType = "update";
      }
      params = {
        operationType: operationType,
        data: form
      };
      context = {
        rcdData: rcdData,
        table: table,
        action: "update"
      };
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson(rcdData.url, params, "application/json", base.ajaxCallback.bind(this, context, dispachAction));
    },
    base_rcd_delete: function(rcdData, form, table) {
      var context, params;
      params = {
        operationType: "remove",
        data: form.id
      };
      context = {
        rcdData: rcdData,
        table: table,
        action: "remove"
      };
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson(rcdData.url, params, "application/json", base.ajaxCallback.bind(this, context, base.rcdConstants.base_RCD_DELETE_SUCCESS));
    },
    base_rcd_delete_id_blank: function() {
      return this.dispatch(base.constants.base_ALERT_SHOW, "レコードが選択されていません");
    },
    base_rcd_transaction: function(rcdData, params, table) {
      var context;
      context = {
        rcdData: rcdData,
        table: table,
        action: "remove"
      };
      this.dispatch(base.constants.base_LOADING);
      return base.ajaxPostJson(rcdData.url, params, "application/json", base.ajaxCallback.bind(this, context, base.rcdConstants.base_RCD_TRANSACTIONS_SUCCESS));
    }
  };

  base.RcdStore = Fluxxor.createStore({
    initialize: function() {
      this.data = {};
      this.bindActions(base.rcdConstants.base_RCD_FETCH_SUCCESS, this.onRcdFetchSuccess, base.rcdConstants.base_RCD_ADD_SUCCESS, this.onRcdAddSuccess, base.rcdConstants.base_RCD_UPDATE_SUCCESS, this.onRcdUpdateSuccess, base.rcdConstants.base_RCD_DELETE_SUCCESS, this.onRcdDeleteSuccess, base.rcdConstants.base_RCD_TRANSACTIONS_SUCCESS, this.onRcdTransactionsSuccess);
    },
    onRcdFetchSuccess: function(res) {
      var context, rcdData, response, table;
      context = res.context;
      response = res.response;
      table = context.table;
      rcdData = context.rcdData;
      this.data[table].rcds = response.data;
      this.data[table].rcd = rcdData.blank;
      this.data[table].selRow = -1;
      this.emit("change");
      this.emit("rcdComplete_" + table);
    },
    onRcdAddSuccess: function(res) {
      var context, rcdData, response, table;
      context = res.context;
      response = res.response;
      table = context.table;
      rcdData = context.rcdData;
      this.data[table].rcds = _.cloneDeep(rcdData.rcds);
      this.data[table].rcd = response.data;
      this.data[table].selRow = this.data[table].rcds.length;
      this.data[table].rcds.push(response.data);
      this.emit("change");
      this.emit("rcdComplete_" + table);
    },
    onRcdUpdateSuccess: function(res) {
      var context, i, j, len, rcd, rcdData, ref, response, table;
      context = res.context;
      response = res.response;
      table = context.table;
      rcdData = context.rcdData;
      this.data[table].rcds = _.cloneDeep(rcdData.rcds);
      this.data[table].selRow = rcdData.selRow;
      this.data[table].rcd = response.data;
      ref = this.data[table].rcds;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        rcd = ref[i];
        if (Number(rcd.id) === Number(response.data.id)) {
          this.data[table].rcds[i] = response.data;
        }
      }
      this.emit("change");
      this.emit("rcdComplete_" + table);
    },
    onRcdDeleteSuccess: function(res) {
      var context, i, j, len, newData, rcd, rcdData, ref, response, table;
      context = res.context;
      response = res.response;
      table = context.table;
      rcdData = context.rcdData;
      this.data[table].rcds = _.cloneDeep(rcdData.rcds);
      newData = [];
      ref = this.data[table].rcds;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        rcd = ref[i];
        if (Number(rcd.id) !== Number(response.data.id)) {
          newData.push(rcd);
        }
      }
      this.data[table].rcds = newData;
      this.data[table].rcd = rcdData.blank;
      this.data[table].selRow = -1;
      this.emit("change");
      this.emit("rcdComplete_" + table);
    },
    onRcdTransactionsSuccess: function(res) {
      var context, i, id, j, len, newrcd, old, rcd, rcdData, ref, response, table;
      context = res.context;
      response = res.response;
      table = context.table;
      rcdData = context.rcdData;
      this.data[table].rcds = _.cloneDeep(rcdData.rcds);
      _.remove(this.data[table].rcds, function(rcd) {
        return rcd.id === "";
      });
      ref = response.data;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        rcd = ref[i];
        newrcd = rcd.response.data;
        id = newrcd.id;
        old = base.getRecordNoById(this.data[table].rcds, id);
        if (old === -1) {
          this.data[table].rcds.push(newrcd);
        } else {
          this.data[table].rcds[old] = newrcd;
        }
      }
      this.data[table].rcd = rcdData.blank;
      this.data[table].selRow = -1;
      this.emit("change");
      this.emit("rcdComplete_" + table);
    },
    addTable: function(table) {
      var template;
      template = {
        rcds: [],
        rcd: {},
        selRow: -1
      };
      return this.data[table] = template;
    }
  });

  base.isNull = function(value) {
    if (typeof value === "undefined" || value === null) {
      return true;
    }
    if (value.length === 0) {
      return true;
    }
  };

  base.dirtyCheck = function(record, oldRecord) {
    var dirty, prop;
    dirty = false;
    for (prop in record) {
      if (base.isNull(oldRecord[prop])) {
        if (!base.isNull(record[prop])) {
          dirty = true;
        }
      } else {
        if (record[prop] !== oldRecord[prop]) {
          dirty = true;
        }
      }
    }
    return dirty;
  };

  base.getRecordById = function(records, id) {
    var j, len, rcd;
    for (j = 0, len = records.length; j < len; j++) {
      rcd = records[j];
      if (rcd.id === id) {
        return rcd;
      }
    }
    return null;
  };

  base.getRecordNoById = function(records, id) {
    var i, j, len, rcd;
    for (i = j = 0, len = records.length; j < len; i = ++j) {
      rcd = records[i];
      if (rcd.id === id) {
        return i;
      }
    }
    return -1;
  };

  base.totalW = function(cw) {
    var length, v;
    length = 0;
    for (v in cw) {
      length = length + cw[v];
    }
    return length;
  };

  base.stringOption = [
    {
      value: "",
      label: ""
    }, {
      value: "=",
      label: "="
    }, {
      value: "between",
      label: "間"
    }, {
      value: "starts with",
      label: "先頭"
    }, {
      value: "contains",
      label: "含む"
    }, {
      value: ">",
      label: ">"
    }, {
      value: ">=",
      label: ">="
    }, {
      value: "<",
      label: "<"
    }, {
      value: "<=",
      label: "<="
    }, {
      value: "<>",
      label: "<>"
    }, {
      value: "like",
      label: "%?指定"
    }
  ];

  base.numberOption = [
    {
      value: "",
      label: ""
    }, {
      value: "=",
      label: "="
    }, {
      value: "between",
      label: "間"
    }, {
      value: ">",
      label: ">"
    }, {
      value: ">=",
      label: ">="
    }, {
      value: "<",
      label: "<"
    }, {
      value: "<=",
      label: "<="
    }, {
      value: "<>",
      label: "<>"
    }
  ];

  base.timestampOption = [
    {
      value: "",
      label: ""
    }, {
      value: "=",
      label: "="
    }, {
      value: "between",
      label: "間"
    }, {
      value: ">",
      label: ">"
    }, {
      value: ">=",
      label: ">="
    }, {
      value: "<",
      label: "<"
    }, {
      value: "<=",
      label: "<="
    }
  ];

}).call(this);
