// Generated by CoffeeScript 1.9.3
wObj.LoginModal = React.createClass({displayName: "LoginModal",
  render: function() {
    return React.createElement(ReactBootstrap.Modal, {
      "bsSize": "small",
      "aria-labelledby": 'loginModal',
      "show": this.props.isShow,
      "onHide": this.props.onClick.bind(this, {
        target: {
          name: "loginForm#CancelBtn"
        }
      }),
      "dialogClassName": "form-login"
    }, React.createElement(ReactBootstrap.Modal.Header, {
      "closeButton": true
    }, React.createElement(ReactBootstrap.Modal.Title, {
      "id": 'loginModal'
    }, "Login Form")), React.createElement(ReactBootstrap.Modal.Body, null, React.createElement(ReactBootstrap.Row, {
      "style": {
        height: 26
      }
    }, React.createElement(ReactBootstrap.Col, {
      "xs": 3.,
      "xsOffset": 1.,
      "style": {
        textAlign: "right"
      }
    }, "Login ID"), React.createElement(ReactBootstrap.Col, {
      "xs": 3.
    }, React.createElement(ReactBootstrap.Input, {
      "type": "text",
      "value": this.props.loginId,
      "onKeyPress": this.props.onKeyPress,
      "name": "loginForm#loginId",
      "onChange": this.props.onChange,
      "style": {
        height: 24,
        fontSize: 12,
        width: 150
      }
    }))), React.createElement(ReactBootstrap.Row, {
      "style": {
        height: 26
      }
    }, React.createElement(ReactBootstrap.Col, {
      "xs": 3.,
      "xsOffset": 1.,
      "style": {
        textAlign: "right"
      }
    }, "Password"), React.createElement(ReactBootstrap.Col, {
      "xs": 3.
    }, React.createElement(ReactBootstrap.Input, {
      "type": "password",
      "value": this.props.password,
      "onKeyPress": this.props.onKeyPress,
      "name": "loginForm#password",
      "onChange": this.props.onChange,
      "style": {
        height: 24,
        fontSize: 12,
        width: 150
      }
    })))), React.createElement(ReactBootstrap.Modal.Footer, null, React.createElement(ReactBootstrap.Button, {
      "onClick": this.props.onClick,
      "name": "loginForm#LoginBtn"
    }, "Login"), React.createElement(ReactBootstrap.Button, {
      "onClick": this.props.onClick,
      "name": "loginForm#CancelBtn"
    }, "Cancel")));
  }
});

wObj.Application = React.createClass({displayName: "Application",
  mixins: [wObj.FluxMixin, wObj.StoreWatchMixin("PAGE", "COMMON")],
  getInitialState: function() {
    wObj.application = this;
    return {
      loginForm: {
        loginId: "",
        password: ""
      },
      loginForm_isShow: false
    };
  },
  getStateFromFlux: function() {

    /* @props.flux=wObj.flux; */
    var commonStore, pageStore;
    pageStore = wObj.flux.store("PAGE");
    commonStore = wObj.flux.store("COMMON");
    return {
      page: _.cloneDeep(pageStore.data),
      common: _.cloneDeep(commonStore.data)
    };
  },
  render: function() {
    var btnWidth;
    btnWidth = 120;
    return React.createElement("div", {
      "className": "container-fixed",
      "style": {
        fontSize: 12,
        border: 1,
        borderStyle: "solid",
        width: 800,
        height: 600
      }
    }, React.createElement(ReactBootstrap.Row, {
      "className": "darkBgLarge",
      "style": {
        margin: 0,
        height: 40,
        lineHeight: "40px",
        verticalAlign: "middle"
      }
    }, React.createElement(ReactBootstrap.Col, {
      "xs": 5.,
      "style": {
        textAlign: "center"
      }
    }, "Test System"), React.createElement(ReactBootstrap.Col, {
      "xs": 5.,
      "className": "darkBgMid",
      "style": {
        textAlign: "center"
      }
    }, this.state.page.name), React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "className": "darkBgMid"
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "name": "btnLogin",
      "style": {
        marginTop: 5
      }
    }, this.state.page.logbtn)), React.createElement(ReactBootstrap.Col, {
      "xs": 1.
    }, React.createElement(base.Loader, {
      "src": "./img/ajax-loader.gif",
      "isLoading": this.state.common.loading
    }))), React.createElement(ReactBootstrap.Row, {
      "style": {
        height: 20
      }
    }), React.createElement(ReactBootstrap.Row, null, React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "xsOffset": 1.
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "style": {
        width: btnWidth
      },
      "name": "btnUser"
    }, "USER\u7ba1\u7406"))), React.createElement(ReactBootstrap.Row, null, React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "xsOffset": 1.
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "style": {
        width: btnWidth
      },
      "name": "btnUserin"
    }, "USER INLINE"))), React.createElement(ReactBootstrap.Row, null, React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "xsOffset": 1.
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "style": {
        width: btnWidth
      },
      "name": "btnUsertab"
    }, "USER\u30bf\u30d6"))), React.createElement(ReactBootstrap.Row, null, React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "xsOffset": 1.
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "style": {
        width: btnWidth
      },
      "name": "btnUsertbl"
    }, "\u30e6\u30fc\u30b6\u30fc\u30c6\u30fc\u30d6\u30eb"))), React.createElement(ReactBootstrap.Row, null, React.createElement(ReactBootstrap.Col, {
      "xs": 1.,
      "xsOffset": 1.
    }, React.createElement(ReactBootstrap.Button, {
      "bsSize": "small",
      "bsStyle": "primary",
      "onClick": wObj.handleClick,
      "style": {
        width: btnWidth
      },
      "name": "btnSystbl"
    }, "\u30b7\u30b9\u30c6\u30e0\u30c6\u30fc\u30d6\u30eb"))), React.createElement(wObj.LoginModal, {
      "isShow": this.state.loginForm_isShow,
      "loginId": this.state.loginForm.loginId,
      "password": this.state.loginForm.password,
      "onClick": wObj.handleClick,
      "onChange": wObj.handleChange,
      "onKeyPress": wObj.handleLoginKeyPress
    }), React.createElement(base.Alert, {
      "isShow": this.state.common.alert.isShow,
      "message": this.state.common.alert.message,
      "onClick": wObj.handleClick
    }));
  },
  componentDidMount: function() {}
});

React.render(React.createElement(wObj.Application, {
  "flux": wObj.flux
}), document.getElementById('content'));
