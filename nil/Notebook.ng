

Main.createNotifyIcon();




var first=false,config={};

var cf=pref().file('config.json');
if(cf.exists){
	config=cf.loadJSON()||{};
}else{
	first=true;
}

config.notebooks=config.notebooks||{};
var httpd=require('HTTPD').HTTPD.create({
	require:['Notebook'],
	notebooks:config.notebooks,
	passwordFiles:{Notebook:pref().file('Notebook.passwords.json')},
	
	paths:{
		
		'/':function(c){
			for(let [n,v] in Iterator(c.parent.notebooks)){
				c.redirect('/Notebook/'+n);
				return;
			}
			c.redirect('/setup');
		},
		
		'/setup':function(c){
			var o=c.params||{};
			if(o.prefMode){
				if(o.prefMode=='portable'){
					Main.createDataDirectory(true);
				}else if(o.prefMode=='appdata'){
					Main.createDataDirectory(false);
				}
				if(o.notebookName && o.notebookPath){
					c.parent.notebooks[o.notebookName]=o.notebookPath;
					c.redirect('/Notebook/'+o.notebookName);
					return;
				}
			}
			c.beginHTML('Notebook.ng initial setting');
			c.write('<h1>Notebook.ng Initial Setting</h1>');
			c.write('<form action="/setup" method="GET">');
			c.write('<h2>Data Directory</h2>');
			c.write('<input type="radio" name="prefMode" id="pm_program" value="program" checked="checked" /><label for="pm_program">Script Directory ('+Main.scriptDirectory.file('users\\'+System.userName+'\\').path.escapeHTML()+')</label><br />');
			c.write('<input type="radio" name="prefMode" id="pm_appdata" value="appdata" /><label for="pm_appdata">AppData Directory ('+System.dataDirectory.file(Main.appName+"\\").path.escapeHTML()+')</label><br />');
			c.write('<input type="radio" name="prefMode" id="pm_portable" value="portable" /><label for="pm_portable">For Portable ('+Main.scriptDirectory.file('config\\').path.escapeHTML()+')</label><br />');
			c.write('<h2>Notebook Name (for URL)</h2>');
			c.write('<input type="text" name="notebookName" value="Main" />');
			c.write('<h2>Notebook Path (absolute path or relative from Data Directory)</h2>');
			c.write('<input type="text" name="notebookPath" value="Main" /><br /><br />');
			c.write('<input type="submit" value="Setup" /></form>');
			c.endHTML();
		},
		
	},
});

if(config.crawlEnabled){
	httpd.notebookEnableCrawl();
}
Main.observe('exit',function(){
	config.notebooks=httpd.notebooks||config.notebooks;
	config.crawlEnabled=httpd.notebookCrawlEnabled||false;
	httpd.notebookStopAllScan();
	httpd.notebookDisableCrawl();
	while(httpd.notebookCrawlExecuting|| Object.keys(httpd.notebookScanStopped).length){
		sleep(500);
	}
	pref().file('config.json').saveJSON(config);
});
if(Object.keys(config.notebooks).length==0){
	exec(httpd.url+'/setup');
}
//コマンドとコマンド名の登録
Main.addCommands({
	openMain:function()(exec(httpd.url)),
});
Main.addTexts({
	openMain:'&Open Notebook',
});

//コンテキストメニュー定義の置き換え
Main.notifyIcon.contextMenu=[
	'openMain',
	null,			//falsy値はセパレータ
	'exit',
];

//クリックイベントの割り当て
Main.notifyIcon.observe('lbuttonDobuleClick',function(){//この関数の実行時のthisはMain.window.notifyIcon
	exec(httpd.url);
});



/*
//2011/01/17以前の版で暫定的に定義されていたテーブルの仕様が変更になったため、
//以前の版を使用したことがある場合、以下の例に従ってDBの再定義を行ってください。

	try{
		var db=(new (require('Notebook').Notebook)("E:\\home\\Application Data\\Notebook\\Main")).__openDB__();
		db.execute('DROP TABLE IF EXISTS crawls');
		db.execute('DROP TABLE IF EXISTS crawl');
		db.execute(<![CDATA[ CREATE TABLE IF NOT EXISTS crawls(
			cid INTEGER PRIMARY KEY AUTOINCREMENT,
			parent INTEGER DEFAULT NULL,
			pid INTEGER,
			url TEXT,
			name TEXT,
			rule TEXT,
			options TEXT,
			backnumbers TEXT,
			atime INTEGER,
			mtime INTEGER,
			lastError TEXT
		)]]>);
		
	}finally{
		free(db);
	}
*/

