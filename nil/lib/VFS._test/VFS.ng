(function(){
	
	var BufferStream=require('BufferStream').BufferStream;
	var VFSPlugin=new Class(Plugin,{
		test:function(uri)(((this.scheme instanceof Array)?(this.scheme.indexOf(uri.scheme)!=-1):(uri.scheme==this.scheme))&&100),
		init:function(){
			for each(let [n,v] in Iterator(this.classes||{})){
				this[n]=this.VFS.define(v);
			}
		},
		from:function(){
		},
	});
	
	
	var URI=new Class({
		__new__:function(src){
			if(src){
				this.uri=src;
			}
		},
		toString:function()(this.uri),
		get uri()(this.scheme+':'+this.body),
		set uri(src){
			var m;
			if(src instanceof Array){
				this.scheme=String(src[0]);
				this.object=src[1]||"";
				this.path=src[2]||"";
			}else if(m=(src=String(src)).match(/^([a-z][a-z0-9\+\-\.]*)\:(.*)$/i)){
				this.scheme=m[1];
				this.body=m[2];
			}else{
				this.scheme='file';
				this.file=new File(src);
			}
		},
		
		get body(){
			if('__file__' in this){
				var f=this.__file__;
				if(f.root instanceof SharedDirectory){
					this.__body__=f.path.replace(/\\/g,'/');
				}else{
					this.__body__='///'+f.path.replace(/\\/g,'/');
				}
			}else if('__object__' in this){
				this.__body__=JSON.stringify(this.__object__)+(this.path||"");
			}else if('__root__' in this){
				this.__body__=this.__root__+(this.path||"");
			}
			return(this.__body__);
		},
		set body(body){
			this.__body__=body;
			delete(this.__file__);
			delete(this.__root__);
			delete(this.__object__);
		},
		
		get subURI(){
			if(this.body.match(/^([a-z][a-z0-9\+\-\.]*)\:(.*)$/i)){
				return(new URI(this.body));
			}
		},
		set subURI(uri)(this.body=String(uri)),
		
		
		get file(){
			if(!('__file__' in this)){
				var b=this.body;
				if(b.indexOf('///')==0){
					this.file=this.body.slice(3);
				}else{
					this.file=this.body;
				}
			}
			return(this.__file__);
		},
		set file(file){
			try{
				if(!(file instanceof AbstractFile)){
					file=String(file);
					if(file.match(/[\\\/]$/)){
						file=new Directory(file);
					}else{
						file=new File(file);
					}
				}
				this.__file__=file;
			}catch(e){
			}
		},
		
		
		__parseRoot__:function(){
			var m=this.body.match(/^(.*?)(\/[^"]*)$/)||[,this.body,""];
			this.root=m[1];
			this.__path__=m[2];
		},
		get root(){
			if(!('__root__' in this)){
				this.__parseRoot__();
			}
			return(this.__root__);
		},
		set root(v){
			delete(this.__body__);
			delete(this.__file__);
			delete(this.__object__);
			this.__root__=v;
		},
		
		__parseObject__:function(){
			this.__parseRoot__();
			try{
				this.object=JSON.parse(this.root);
			}catch(e){
				this.__object__=void(0);
			}
		},
		get path(){
			if(!('__path__' in this)){
				this.__parseObject__();
			}
			return(this.__path__);
		},
		
		set path(p){
			if((p=String(p||"")) && p.match(/^[^\/]/)){
				throw(Error('URI: absolute path is invalid ("'+p+'")'));
			}
			this.__path__=p;
		},
		get object(){
			if(!('__object__' in this)){
				this.__parseObject__();
			}
			return(this.__object__);
		},
		set object(obj){
			delete(this.__body__);
			delete(this.__root__);
			delete(this.__file__);
			this.__object__=obj;
		},
		
	});
	
	var VFSFile=new Class({
		get root()(this.parent?this.parent.root:this),
		get path()((this.parent&&this.name)?(this.parent.path+'/'+this.name+(this.leaf?'':'/')):''),
		toString:function(){
			if(this.parent){
				var uri=this.root.toString();
				if(uri){
					return(uri+this.path);
				}
			}
		},
		name:"",
		parent:void(0),
		src:void(0),
		ref:void(0),
		
		get leaf()(!this.children),
		child:function(name){
			for(let c in this.children||{}){
				if(c.name==name){
					return(c);
				}
			}
		},
		file: function(path){
			var res=this;
			if(path){
				for(var i=0,a=String(path).split(/[\/\\]/),l=a.length;i<l;i++){
					switch(a[i]){
						case('.'):{
							break;
						}case('..'):{
							res=res.parent;
							break;
						}case(''):{
							if(i==0){
								res=res.root;
							}
							break;
						}default:{
							res=res.child(a[i]);
							break;
						}
					}
				}
			}
			return(res);
		},
		children:void(0),
		
		
		
		exists:void(0),
		textOnly:void(0),
		size:void(0),
		capacity:void(0),
		
		
		
		
		get timeModified()(void(0)),
		set timeModified(){},
		get timeCreated()(void(0)),
		set timeCreated(){},
		get timeAccessed()(void(0)),
		set timeAccessed(){},
		get title()(void(0)),
		set title(){},
		get description()(void(0)),
		set description(){},
		get width()(void(0)),
		set width(){},
		get height()(void(0)),
		set height(){},
		get duration()(void(0)),
		set duration(){},
		
		
		
		
		addable:false,
		nameable:false,
		get readable()((this.openRead!==proto.openRead)||(this.load!==proto.load)||(this.loadBytes!==proto.loadBytes)),
		seekable:false,
		get creatable()((this.parent||{}).nameable),
		get updatable()((this.openWrite!==proto.openWrite)||(this.update!==proto.update)||(this.updateBytes!==proto.updateBytes)),
		get appendable()((this.openAppend!==proto.openAppend)||(this.append!==proto.append)||(this.appendBytes!==proto.appendBytes)||(this.updatable&&this.seekable)),
		get removable()(typeof(this.remove)=='function'),
		
		
		add:function(str,enc,meta){
			if(typeof(enc)=='object'){
				meta=enc;
				enc=meta.encoding;
				delete(meta.encoding);
			}else{
				meta=meta||{};
			}
			try{
				var buf=MBString.from(str,enc);
				return(this.addBytes(buf,meta));
			}finally{
				buf&&buf.free();
			}
		},
		addBytes:function(body,meta){
		},
		
		create:function(obj){
			if(!this.exists){
				this.save("");
			}
			obj=obj||{};
			for(let [n,v] in Iterator(obj)){
				this[n]=v;
			}
		},
		
		
		get content()(this.load()),
		set content(s)(this.update(s)),
		
		
		load:function(enc){
			try{
				var buf=this.loadBytes();
				if(buf){
					return(buf.toString(enc));
				}
			}finally{
				buf&&buf.free();
			}
		},
		loadBytes:function(){
			if(this.openRead!==proto.openRead){
				try{
					var s=this.openRead();
					return(s.readAll());
				}finally{
					s&&s.free();
				}
			}
		},
		openRead:function(){
			if(this.loadBytes!==proto.loadBytes){
				var buf=this.loadBytes();
				if(buf){
					return(new BufferStream({buffer:buf,free:true}));
				}
			}
		},
		
		
		
		save:function(str,enc,meta){
			if(!this.exists){
				return(this.update(str,enc,meta));
			}
		},
		saveBytes:function(body,meta){
			if(!this.exists){
				return(this.updateBytes(body,meta));
			}
		},
		update:function(str,enc,meta){
			try{
				if(typeof(enc)=='object'){
					meta=enc;
					enc=meta.encoding;
					delete(meta.encoding);
				}else{
					meta=meta||{};
				}
				var buf=MBString.from(str,enc);
				return(this.updateBytes(buf,meta));
			}finally{
				buf&&buf.free();
			}
		},
		updateBytes:function(buf,meta){
			if(this.openWrite!==proto.openNew){
				try{
					var s=this.openNew(meta);
					s.write(buf);
					return(this);
				}finally{
					s&&s.free();
				}
			}
		},
		openNew:function(meta){
			if(this.exists){
				if(this.creatable && this.remove()){
					return(this.openWrite(meta));
				}
			}else{
				return(this.openWrite(meta));
			}
		},
		
		
		
		
		openWrite:function(meta){
			if(this.updateBytes!==proto.updateBytes){
				let _this=this;
				return(new BufferStream({
					buffer:this.loadBytes(),
					free:true,
					write:function(buf){
						_this.updateBytes(buf);
						for(let [n,v] in Iterator(meta)){
							if(typeof(v)!='undefined'){
								_this[n]=v;
							}
						}
					},
				}));
			}
		},
		
		append:function(obj,enc){
			if((this.openAppend!==proto.openAppend) ||(this.seekable && (this.openWrite!==proto.openWrite))){
				try{
					var buf=MBString.from(obj,enc);
					return(this.appendBytes(buf));
				}finally{
					buf && buf.free();
				}
			}
		},
		appendBytes:function(obj){
			if((this.openAppend!==proto.openAppend) ||(this.seekable && (this.openWrite!==proto.openWrite))){
				try{
					var s=this.openAppend();
					s.write(obj);
					return(this);
				}finally{
					s&&s.free();
				}
			}
		},
		openAppend:function(){
			if(this.seekable && (this.openWrite!==proto.openWrite)){
				var res=this.openWrite();
				if(res.seek(this.size)){
					return(res);
				}else{
					res.free();
				}
			}else if((this.readable)&&(this.updatable)){
				let _this=this;
				return(new BufferStream({
					buffer:this.loadBytes(),
					free:true,
					append:true,
					write:function(buf)(_this.updateBytes(buf))
				}));
			}
		},
		
		copyTo:function(dest,overwrite)(this.copy(VFS.from(dest).child(this.name),overwrite)),
		copy:function(dest,overwrite)(this.copyAll(dest,overwrite)),
		copyAll:function(dest,overwrite){
			if(dest=this.copyThis(dest,overwrite)){
				var fail=false;
				if(this.children && dest.nameable){
					for(let c in this.children){
						fail=!c.copy(dest.child(c.name), overwrite)||fail;
					}
				}
				for(var i=0,a=['timeModified','timeCreated','timeAccessed','title','description'],l=a.length;i<l;i++){
					var v=this[a[i]];
					if(typeof(v)!='undefined'){
						dest[a[i]]=v;
					}
				}
				return(fail?void(0):dest);
			}
		},
		copyThis:function(dest,overwrite){
			if(!dest){
				return(void(0));
			}
			dest=VFS.from(dest);
			if(this.exists && dest.creatable && (!dest.exists||overwrite)){
				var meta={
					timeModified:this.timeModified,
					timeCreated:this.timeCreated,
					timeAccessed:this.timeAccessed,
					title:this.title,
					description:this.description,
				};
				if(!this.readable){
					dest=dest.create(meta);
				}else if(this.textOnly){
					dest=dest.update(this.load(),meta);
				}else if(dest.openNew!==proto.openNew){
					try{
						var from=this.openRead(), to=dest.openNew(meta);
						var size=this.bufferSize||8192;
						var buf=Byte.alloc(size);
						while(!from.eof){
							buf.count=from.readTo(buf.valueOf(),size);
							to.write(buf);
						}
					}finally{
						from&&from.free();
						to&&to.free();
						buf&&buf.free();
					}
				}else{
					try{
						var buf=this.loadBytes();
						dest.updateBytes(buf,meta);
					}finally{
						buf.free();
					}
				}
				for(let [n,v] in Iterator(meta)){
					try{
						dest[n]=v;
					}catch(e){
					}
				}
				return(dest);
			}
		},
		
		move:function(dest)(this.moveAll(dest)),
		moveTo:function(dest,overwrite)(this.move(VFS.from(dest).child(this.name),overwrite)),
		moveAll:function(dest){
			if(this.removable&&(dest=this.copyThis(dest,overwrite))){
				var fail=false;
				if(this.children){
					for(let c in this.children){
						if(!dest.nameable){
							fail=true;
							break;
						}
						fail=fail||!c.move(dest.child(c.name),overwrite);
					}
				}
				if(!fail){
					this.remove();
					return(dest);
				}
			}
		},
		moveThis:function(dest,overwrite){
			if(this.removable && (dest=this.copyThis(dest,overwrite))){
				this.remove();
				return(dest);
			}
		},
		rename:function(name){
			var p=this.parent;
			if(p&&p.nameable){
				return(this.move(p.child(name)));
			}
		},
		remove:function(){
			var ok=true;
			if(this.children){
				for(let c in this.children){
					if(!c.remove()){
						ok=false;
					}
				}
			}
			return(ok && !!this.removeThis());
		},
		removeThis:function(){
		}
	});
	var proto=VFSFile.prototype;
	
	var VFS=new Class({
		__class__:{
			define:function(){
				var obj={};
				for(var i=0,l=arguments.length;i<l;i++){
					obj=Object.extend({},arguments[i]||{});
				}
				return(new Class(VFSFile,obj));
			},
			plugins:new Pluggable('VFS',VFSPlugin),
			__call__:function(src)(this.from(src)),
			from:function(src){
				if(src instanceof VFSFile){
					return(src);
				}else{
					var plugin,path;
					src=(src instanceof URI)?src:(new URI(src));
					if(src.scheme=='vfs'){
						plugin=this.plugins.item(src.object[0]);
						path=src.object[2]||src.path;
						src=new URI(src.object[1]);
					}else{
						
						plugin=this.plugins.find(src);
						
					}
					if(plugin){
						src=plugin.from(src);
						if(path){
							src=src.file(path);
						}
						return(src);
					}
				}
			},
		},
	});
	VFSPlugin.addMembers({
		VFS:VFS,
		URI:URI,
		VFSFile:VFSFile,
	});
	this.URI=URI;
	this.VFS=VFS;
	this.VFSFile=VFSFile;
})