(function(){
	var Job=new Class({
		__new__:function(parent,src,priority){
			this.parent=parent;
			this.src=src;
			this.__priority__=priority||0;
			this.state='created';
			this.current=0;
		},
		
		set priority(v){
			this.parent.__jobsMutex__.lock();
			try{
				this.__priority__=v;
				this.parent.__updated__=true;
			}finally{
				this.parent.__jobsMutex__.unlock();
			}
		},
		get priority()(this.__priority__),
		
		get progress()(this.total&&(this.current/this.total)),
		
		start:function()(this.parent.start(this)),
		abort:function()(this.parent.abort(this)),
		reset:function()(this.parent.reset(this)),
		remove:function()(this.parent.remove(this)),
	});
	
	var JobList=new Class({},EventMixin,{
		maxThreads:System.processorCount,
		__new__:function(opt){
			this.active=0;
			this.jobs=[];
			this.__jobsMutex__=new Mutex();
			this.__mainThread__=null;
			this.__updated__=false;
			Object.extend(this,opt||{});
		},
		free:function(){
			if(this.__mainThread__){
				this.abort();
				(this.__mainThread__||{waitExit:Function.doNothing}).waitExit();
			}
			free(this.__jobsMutex__);
		},
		launchInterval:20,
		__mainThreadFunc__:function(list){
			try{
				var mux=new Mutex();
				var sigMain=new Signal();
				var sigSub=new Signal();
				var threads=[];
				var exitThread=false;
				var jobs;
				var job,thre;
				var next=function(j){
					mux.lock();
					try{
						job=j;
						thre=Thread.current.id;
						sigMain.turnOnAndWait(sigSub);
						sigSub.turnOff();
						return(job);
					}finally{
						mux.unlock();
					}
				};
				list.fire('begin');
				while(true){
					list.__jobsMutex__.lock();
					try{
						if(!jobs||list.__updated__){
							jobs=[];
							for(var a=list.jobs,i=a.length-1;i>=0;i--){
								if(a[i].state=='waiting'){
									jobs[jobs.length]=a[i];
								}
							}
							jobs=jobs.orderBy('__priority__');
							list.__updated__=false;
						}
					}finally{
						list.__jobsMutex__.unlock();
					}
					if(!exitThread && jobs.length && (threads.length<list.maxThreads)){
						sleep(list.launchInterval);
						threads.push(Thread.create(list.__subThreadFunc__,[list,next]));
						list.active++;
					}
					if(threads.length==0){
						if(jobs.length){
							var i=0,l=jobs.length;
							while(!list.__updated__ && !list.jobIsExecutable(jobs[i])){
								if(!i){
									sleep(50);
								}
								i=(i+1)%l;
							}
							exitThread=0;
							continue;
						}else{
							break;
						}
					}
					sigMain.wait();
					sigMain.turnOff();
					if(job){
						list.jobAfter(job);
						switch(job.state){
							case('executing'):{
								list.fire('complete',{job:job});
								job.state='completed';
								break;
							}case('aborting'):{
								list.fire('abort',{job:job});
								job.state='aborted';
								break;
							}case('failed'):defualt:{
								list.fire('fail',{job:job});
								break;
							}
						}
					}
					job=null;
					exitThread=thre;
					if(threads.length<=list.maxThreads){
						for(var i=jobs.length-1;i>=0;i--){
							if(list.jobIsExecutable(jobs[i])){
								job=jobs[i];
								jobs.splice(i,1);
								list.jobBefore(job);
								list.fire('start',{job:job});
								job.state='executing';
								exitThread=0;
								break;
							}
						}
					}
					sigSub.turnOn();
					if(exitThread){
						for(var i=0,l=threads.length;i<l;i++){
							if(threads[i].id==exitThread){
								threads[i].waitExit();
								threads.splice(i,1);
								list.active--;
								break;
							}
						}
					}
				}
				list.fire('end');
			}catch(e){
				println(e);
			}finally{
				free(mux,sigMain,sigSub);
			}
			list.__mainThread__=null;
		},
		
		__subThreadFunc__:function(list,next){
			var job;
			while(job=next(job)){
				try{
					for(let y in list.jobMain(job)){
						if(job.state=='aborting'){
							break;
						}
					}
				}catch(e){
					job.state='failed';
					job.error=e;
				}
			}
		},
		
		
		
		
		
		add:function(src,priority,active){
			var res=[];
			if(!(src instanceof Array)){
				src=[src];
			}
			this.__jobsMutex__.lock();
			try{
				for(var i=0,l=src.length;i<l;i++){
					
					var job=new Job(this,src[i],priority);
					this.jobs.push(job);
					res[res.length]=job;
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
			if(active){
				this.start(res);
			}
			return(res);
		},
		start:function(jobs){
			this.__jobsMutex__.lock();
			try{
				if(!jobs){
					jobs=this.jobs.slice(0);
				}else if(!(jobs instanceof Array)){
					jobs=[jobs];
				}
				var mod=false;
				for(var i=0,l=jobs.length;i<l;i++){
					if(jobs[i].state=='created'){
						jobs[i].state='waiting';
						mod=true;
					}
				}
				if(mod){
					this.__updated__=true;
					if(!(this.__mainThread__&&this.__mainThread__.exits)){
						this.__mainThread__=Thread.create(this.__mainThreadFunc__,[this]);
					}
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		
		remove:function(jobs){
			this.__jobsMutex__.lock();
			try{
				if(!jobs){
					jobs=this.jobs.slice(0);
				}else if(!(jobs instanceof Array)){
					jobs=[jobs];
				}
				for(var i=0,l=jobs.length;i<l;i++){
					switch(jobs[i].state){
						case('executing'):{
							jobs[i].state='aborting';
							break;
						}case('waiting'):{
							this.__updated__=true;
							break;
						}
					}
					this.jobs.remove(jobs[i]);
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		abort:function(jobs){
			this.__jobsMutex__.lock();
			try{
				if(!jobs){
					jobs=this.jobs.slice(0);
				}else if(!(jobs instanceof Array)){
					jobs=[jobs];
				}
				for(var i=0,l=jobs.length;i<l;i++){
					switch(jobs[i].state){
						case('executing'):{
							jobs[i].state='aborting';
							break;
						}case('waiting'):{
							jobs[i].state='created';
							this.__updated__=true;
							break;
						}
					}
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		reset:function(jobs){
			this.__jobsMutex__.lock();
			try{
				if(!jobs){
					jobs=this.jobs.slice(0);
				}else if(!(jobs instanceof Array)){
					jobs=[jobs];
				}
				for(var i=0,l=jobs.length;i<l;i++){
					switch(jobs[i].state){
						case('failed'):case('aborted'):case('completed'):{
							jobs[i].state='created';
							delete(jobs[i].error);
						}
					}
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		
		clear:function(jobs){
		},
		
		
		
		importList:function(list){
			this.__jobsMutex__.lock();
			try{
				var a=this.jobs;
				for(var i=0,l=list.length;i<l;i++){
					var job=new Job(this,list[i].src,list[i].priority);
					switch(list[i].state){
						case('executing'):{
						}case('waiting'):{
							job.state='created';
							break;
						}case('aborting'):{
							job.state='aborted';
							break;
						}default:{
							job.state=list[i].state;
						}
					}
					a[a.length]=job;
				}
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		exportList:function(){
			this.__jobsMutex__.lock();
			try{
				var res=[];
				for(var i=0,a=this.jobs,l=a.length;i<l;i++){
					res[i]={
						src:a[i].src,
						priority:a[i].__priority__,
						state:a[i].state,
						total:a[i].total,
						current:a[i].current,
					};
				}
				return(res);
			}finally{
				this.__jobsMutex__.unlock();
			}
		},
		loadList:function(file){
			if(!file.load){
				file=new File(file);
			}
			this.importList(file.loadJSON());
			return(this);
		},
		saveList:function(file){
			if(!file.save){
				file=new File(file);
			}
			file.saveJSON(this.exportList());
			return(this);
		},
		
		
		
		
		jobIsExecutable:function(job)(true),
		jobBefore:function(){},
		jobAfter:function(){},
		jobMain:function(job){
			while(job.src()){
				yield;
			}
		},
	});
	
	this.JobList=JobList;
	
})