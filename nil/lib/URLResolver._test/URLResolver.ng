(function(){
	var URLResolverPlugin=new Class(Plugin,{
		test:function(url)(String(url).match(this.pattern||/^[^\s\S]$/)?10:0),
	});
	var {URL,HTTP}=require('HTTP');
	var URLResolver=new Class({
		__class__:{
			plugins:new Pluggable('URLResolver',URLResolverPlugin),
			resolve:function(url,base){
				if(!this.__singletonInstance__){
					this.__singletonInstance__=new this();
				}
				return(this.__singletonInstance__.resolve(url,base));
			},
			
		},
		__new__:function(){
			this.__cache__={};
		},
		__addCache__:function(from,to){
			this.__cache__[from]=to;
		},
		resolve:function(url,base){
			if(base){
				url=String((new URL(base)).build(url));
			}else{
				url=String(url);
			}
			if(url in this.__cache__){
				return(this.__cache__[url]);
			}
			var newURL=url;
			var p=this.constructor.plugins.find(url);
			if(p){
				if(p.extract){
					if(p.extract=='location'){
						try{
							var http=new HTTP({timeout:10000});
							var req=http.request(url);
							req.observe('redirect',function(){
								newURL=this.response.headers.location;
							});
							var res=req.send();
						}finally{
							free(res,req,http);
						}
					}else{
						var html=HTTP.getText(url);
						if(typeof(p.extract)=='function'){
							newURL=p.extract(html,url);
						}else if(p.extract=='meta'){
							var m=html.match(/<meta\b[^>]*http-equiv="?refresh["\s][^>*]>/i);
							if(m && (m=m[0].match(/content="?[^"]*url=([^" ]*)/i))){
								newURL=m[1];
							}
						}else if(p.extract instanceof RegExp){
							newURL=(html.match(p.extract)||[,url])[1];
						}
					}
				}else if(typeof(p.rewrite)=='function'){
					newURL=p.rewrite(url);
				}else if(p.rewrite){
					newURL=url.replace(p.pattern,p.rewrite);
				}
				this.__cache__[url]=newURL;
				return(this.resolve(newURL));
			}else{
				return(url);
			}
		},
	});
	this.URLResolver=URLResolver;
})