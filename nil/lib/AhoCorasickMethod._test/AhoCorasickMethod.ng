(function(){
	var State=new Class({
		__new__:function(){
			this.next={};
			this.outputs=[];
		},
		go:function(next)(this.next[next]||this.alt),
	});
	var Automaton=new Class({
		__new__:function(sortCallback){
			this.start=new State();
			this.start.alt=this.start;
			this.sortCallback=sortCallback;
		},
		addRule:function(ptn,obj){
			var s=this.start ,t;
			for(var i=0,l=ptn.length;i<l;i++){
				s=s.next[t=ptn[i]]||(s.next[t]=new State());
			}
			s.outputs.push(obj||ptn);
		},
		prepare:function(){
			var start=this.start;
			var q=[start];
			while(q.length){
				var state=q.pop();
				for(let t in state.next){
					var next=state.go(t);
					if(next){
						q.push(next);
					}
					if(!state.alt){
						var f=state.failure||start;
						while(!f.go(t)){
							f=f.failure||start;
						}
						if(next){
							next.outputs=next.outputs.concat((next.failure=f.go(t)).outputs);
						}
					}
				}
			}
			this.context=this.start;
		},
		input:function(t){
			var state=this.context;
			while(!state.go(t)){
				state=state.failure||this.start;
			}
			this.context=state.go(t);
			if(!this.context.sorted && this.sortCallback){
				this.context.outputs.sort(this.sortCallback);
				this.context.sorted=true;
			}
			return(this.context.outputs);
		},
		reset:function(){
			this.context=this.start;
			return(this.context.outputs);
		},
	});
	this.Automaton=Automaton;
})