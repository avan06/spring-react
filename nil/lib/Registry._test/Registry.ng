(function(){
	var 
		RegOpenKey=				advapi32.proc('RegOpenKeyExW',[UInt,WideString,UInt,UInt,Pointer],UInt),
		RegCreateKey=			advapi32.proc('RegCreateKeyExW',[UInt,WideString,UInt,UInt,UInt,UInt,UInt,Pointer,UInt],UInt),
		RegCloseKey=			advapi32.proc('RegCloseKey',[UInt],UInt),
		RegEnumKey=				advapi32.proc('RegEnumKeyExW',[UInt,UInt,WideString,Pointer,UInt,UInt,UInt,Pointer],UInt),
		RegEnumValue=			advapi32.proc('RegEnumValueW',[UInt,UInt,WideString,Pointer,UInt,Pointer,Pointer,Pointer],UInt),
		RegQueryInfoKey=		advapi32.proc('RegQueryInfoKeyW',[UInt,UInt,UInt,UInt,Pointer,Pointer,Pointer,Pointer,Pointer,Pointer,Pointer,Pointer],UInt),
		RegDeleteKey=			advapi32.proc('RegDeleteKeyW',[UInt,WideString],UInt),
		RegFlushKey=			advapi32.proc('RegFlushKey',[UInt],UInt),
		RegQueryValue=			advapi32.proc('RegQueryValueExW',[UInt,WideString,UInt,Pointer,Pointer,Pointer],UInt),
		RegSetValue=			advapi32.proc('RegSetValueExW',[UInt,WideString,UInt,UInt,Pointer,UInt],UInt),
		RegDeleteValue=			advapi32.proc('RegDeleteValueW',[UInt,WideString],UInt),
		RegNotifyChangeKeyValue=advapi32.proc('RegNotifyChangeKeyValue',[UInt,Int,UInt,UInt,Int],UInt);
	
	var rootHandles=new Enum({
		HKEY_CLASSES_ROOT:		0x80000000,HKCR:0x80000000,
		HKEY_CURRENT_USER:		0x80000001,HKCU:0x80000001,
		HKEY_LOCAL_MACHINE:		0x80000002,HKLM:0x80000002,
		HKEY_USERS:				0x80000003,HKU:0x80000003,
		HKEY_PERFORMANCE_DATA:	0x80000004,HKPD:0x80000004,
		HKEY_CURRENT_CONFIG:	0x80000005,HKCC:0x80000005,
		HKEY_DYN_DATA:			0x80000006,HKDD:0x80000006,
	});
	var valueTypes=new Enum({
		none:		0,
		sz:			1,
		expandSZ:	2,
		binary:		3,
		dword:		4,
		multiSZ:	7,
		string:1,
		number:4,
		array:7,
	});
	var RegistryValue=(new Class({
		__new__:function(parent,name){
			this.parent=parent;
			this.name=name||"";
		},
		get exists(){
			try{
				var h=this.parent.open();
				return(RegQueryValue(h,this.name,0,null,null,null)!=2);
			}finally{
				h&&RegCloseKey(h);
			}
		},
		get type(){
			try{
				var h=this.parent.open();
				var t=valueTypes.alloc();
				var res=RegQueryValue(h,this.name,0,t,null,null);
				if(res==2){
					return(void(0));
				}else if(res==0){
					return(t.item().toString());
				}else{
					throw(Object.extend(new Error('registry error: open failure('+this.fullPath+")"),{code:res}));
				}
			}finally{
				h&&RegCloseKey(h);
				t&&t.free();
			}
		},
		valueOf:function(){
			try{
				var h=this.parent.open();
				var t=valueTypes.alloc();
				var s=UInt.alloc();
				var res=RegQueryValue(h,this.name,0,t,null,s);
				if(res==2){
					return(void(0));
				}else if(res==0){
					var b=Byte.alloc(s.item());
					res=RegQueryValue(h,this.name,0,null,b,s);
					switch(String(t.item())){
						case('sz'):			return((new WideString(b)).toString());
						case('expandSZ'):	return((new WideString(b)).toString());
						case('multiSZ'):	return((new MultiWideString(b)).toArray());
						case('dword'):		return((new UInt.pointer(b)).item());
						case('binary'):		return(let(ptr=b)(b=0,ptr));
					}
				}else{
					throw(Object.extend(new Error('registry error: open failure('+this.fullPath+")"),{code:res}));
				}
			}finally{
				h&&RegCloseKey(h);
				t&&t.free();
				s&&s.free();
				b&&b.free();
			}
		},
		update:function(value,type,size){
			if(type){
				type=valueTypes.getName(type);
			}else{
				if(value instanceof Array){
					type='multiSZ';
				}else if(typeof(value)=='number'){
					type='dword';
				}else if(value instanceof Pointer){
					type='binary';
				}else{
					type='sz';
				}
			}
			
			try{
				var b;
				switch(type){
					case('dword'):{
						size=4;
						b=UInt.alloc().update(value);
						break;
					}case('multiSZ'):{
						value=$A(value);
						size=2;
						for(var i=0,l=value.length;i<l;i++){
							value[i]=value[i].toString();
							size+=value[i].length*2+2;
						}
						b=MultiWideString.from(value);
						break;
					}case('binary'):{
						if(!size){
							if(value.constructor.entity.size){
								size=value.constructor.entity.size;
							}else{
								throw('type error: unknown size');
							}
						}
						b=value;
						break;
					}default:{
						value=String(value);
						size=value.length*2+2;
						b=WideString.from(value);
						break;
					}
				}
				var h=this.parent.open(0xF);
				RegSetValue(h,this.name,0,valueTypes[type],b,size);
			}finally{
				h&&RegCloseKey(h);
				b&&(type!='binary')&&b.free();
			}
		},
		remove:function(){
			try{
				var h=this.parent.open(0xF);
				RegDeleteValue(h,this.name);
			}finally{
				h&&RegCloseKey(h);
			}
		},
	}));
	var Registry=(new Class({
		__new__:function(root,path){
			if(typeof(root)=='string'){
				var ary=root.split(/\\/);
				this.rootHandle=rootHandles.nameValue[ary[0]];
				if(!this.rootHandle){
					throw(new Error('registry error: invalid root name'));
				}
				this.path=ary.slice(1).join("\\");
				this.name=ary[ary.length-1];
			}else{
				this.rootHandle=root;
				this.path=path;
				this.name=path.split(/\\/).pop();
			}
			this.root=rootHandles.valueName[this.rootHandle];
			this.fullPath=this.root+"\\"+this.path;
		},
		get parent()(this.path?new this.constructor(this.rootHandle,this.path.split(/\\/).slice(0,-1).join("\\")):undefined),
		
		open:function(flags){
			try{
				if(!this.path){
					return(this.rootHandle);
				}
				var hKey=UInt.alloc();
				var res=RegOpenKey(this.rootHandle,this.path,0,flags||0x1,hKey);
				if(res==0){
					return(hKey.item());
				}else{
					throw(Object.extend(new Error('registry error: open failure('+this.fullPath+")"),{code:res}));
				}
			}finally{
				free(hKey);
			}
		},
		
		get exists(){
			try{
				return(this.open() && true);
			}catch(e if e.code==2){
				return(false);
			}
		},
		get timeLastModified(){
			try{
				var h=this.open(0x9);
				var t=Date.FileTime.alloc();
				RegQueryInfoKey(h,0,0,0,null,null,null,null,null,null,null,t);
				return(t.toObject());
			}finally{
				h&&RegCloseKey(h);
				t&&t.free();
			}
			return(res);
		},
		
		get empty(){
			for(var k in this.keys){
				return(false);
			}
			for(var v in this.values){
				return(valse);
			}
			return(true);
		},
		
		get keys(){
			try{
				var h=this.open(0x9);
				var pLength=UInt.alloc();
				RegQueryInfoKey(h,0,0,0,null,pLength,null,null,null,null,null,null);
				var len=pLength.item()+1;
				var name=WChar.alloc(len);
				for(var idx=0;;idx++){
					pLength.update(len);
					switch(RegEnumKey(h,idx,name,pLength,0,0,0,null)){
						case(259):throw(StopIteration);
						case(0):yield(this.key(String(name)));
					}
				}
			}finally{
				h		&&RegCloseKey(h);
				pLength	&&pLength.free();
				name	&&name.free();
			}
		},
		key:function(name)(new this.constructor(this.root+"\\"+(this.path?this.path+"\\":"")+name)),
		
		get values(){
			try{
				var h=this.open(0x9);
				var pLength=UInt.alloc();
				RegQueryInfoKey(h,0,0,0,null,null,null,null,pLength,null,null,null);
				var len=pLength.item()+1;
				var name=WChar.alloc(len);
				for(var idx=0;;idx++){
					pLength.update(len);
					switch(RegEnumValue(h,idx,name,pLength,0,null,null,null)){
						case(259):throw(StopIteration);
						case(0):yield(this.value(String(name)));
					}
				}
			}finally{
				h		&&RegCloseKey(h);
				pLength	&&pLength.free();
				name	&&name.free();
			}
		},
		value:function(name)(new RegistryValue(this,name)),
		
		getValue:function(name,type){
			var v=this.value(name).valueOf();
			if(type){
				if(type instanceof Array){
					var ro=new type[0](v);
					var res=ro.toObject?ro.toObject():ro.toString();
					ro.free();
					return(res);
				}else if(type.symbol){
					return(new type(v));
				}else{
					return(new type.pointer(v));
				}
			}else{
				return(v);
			}
		},
		setValue:function(name,value,type,size)(this.create().value(name).update(value,type,size)),
		valueExists:function(name)(this.value(name).exists),
		removeValue:function(name)(this.value(name).remove()),
		
		create:function(){
			if(!this.parent.exists){
				this.parent.create();
			}
			try{
				var hKey=UInt.alloc();
				RegCreateKey(this.rootHandle,this.path,0,0,0,1,0,hKey,0);
				RegCloseKey(hKey);
				return(this);
			}finally{
				hKey.free();
			}
		},
		
		flush:function(){
			try{
				var h=this.open(0x9);
				RegFlushKey(h);
			}finally{
				h&&RegCloseKey(h);
			}
		},
		remove:function(){
			if(this.exists){
				for each(var [i,k] in Iterator([k for(k in this.keys)])){
					k.remove();
				}
				try{
					var h=this.parent.open(0x9);
					RegDeleteKey(h,this.name);
				}finally{
					h&&RegCloseKey(h);
				}
			}
		},
	})).addAliases({
		mtime:"timeLastModified",
	});
	this.valueTypes=valueTypes;
	this.rootHandles=rootHandles;
	this.Registry=Registry;
	this.RegistryValue=RegistryValue;
})