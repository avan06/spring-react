(function(){
	
	
	var AuxCaps=new Struct({
		mid:		Word,
		pid:		Word,
		version:	UInt,
		name:		[WChar,32],
		technology:	Word,
		res:		Word,
		support:	UInt,
	});
	
	var WaveOutCaps=new Struct({
		mid:		Word,
		pid:		Word,
		version:	UInt,
		name:		[WChar,32],
		formats:	UInt,
		channels:	Word,
		res:		Word,
		support:	UInt,
		
		
	});
	
	
	var MixerCaps=new Struct({
		mid:		Word,
		pid:		Word,
		version:	UInt,
		name:		[WChar,32],
		support:	UInt,
		destCount:	UInt,
	});
	var MixerControl=new Struct({
		size:			UInt,
		controlID:		UInt,
		controlType:	UInt,
		controlFlags:	UInt,
		itemCount:		UInt,
		shortName:		[WChar,16],
		name:			[WChar,64],
		reserved:		[UInt,12],
	});
	var MixerControlDetails=new Struct({
		size:			UInt,
		controlID:		UInt,
		cChannels:		UInt,
		cMultipleItems:	UInt,
		detailsSize:	UInt,
		detailsPointer:	UInt,
	});
	
	
	var winmm=WinLibrary.load('Winmm.dll');
	
	var 
		auxGetNumDevs=		winmm.proc('auxGetNumDevs',[],UInt),
		auxGetDevCaps=		winmm.proc('auxGetDevCapsW',[UInt,AuxCaps,UInt],UInt),
		auxGetVolume=		winmm.proc('auxGetVolume',[UInt,Pointer],UInt),
		auxSetVolume=		winmm.proc('auxSetVolume',[UInt,UInt],UInt),
		auxOutMessage=		winmm.proc('auxOutMessage',[UInt,UInt,Pointer,Pointer],UInt),
		
		waveOutGetNumDevs=	winmm.proc('waveOutGetNumDevs',[],UInt),
		waveOutGetDevCaps=	winmm.proc('waveOutGetDevCapsW',[UInt,WaveOutCaps,UInt],UInt),
		
		
		mixerGetNumDevs=	winmm.proc('mixerGetNumDevs',[],UInt),
		mixerGetDevCaps=	winmm.proc('mixerGetDevCapsW',[UInt,Pointer,UInt],Int),
		mixerOpen=			winmm.proc('mixerOpen',[Pointer,UInt,Pointer,Pointer,UInt],Int),
		mixerGetLineInfo=	winmm.proc('mixerGetLineInfoW',[UInt,Pointer,UInt],Int),
		mixerGetLineControls=	winmm.proc('mixerGetLineControlsW',[UInt,Pointer,UInt],Int),
		mixerGetControlDetails=	winmm.proc('mixerGetControlDetailsW',[UInt,Pointer,UInt],Int),
		mixerSetControlDetails=	winmm.proc('mixerSetControlDetailsW',[UInt,Pointer,UInt],Int),
		mixerClose=			winmm.proc('mixerClose',[UInt],Int),
		
	var_end;
	
	
	var MixerDevice=new Class({
	});
	var MixerDest=new Class({
	});
	var MixerSource=new Class({
	});
	
	
	var WaveOutDevice=new Class({
		__class__:{
			get all(){
				println(waveOutGetNumDevs());
				for(var i=0,l=waveOutGetNumDevs();i<l;i++){
					yield(new this(i));
				}
			},
			find:function(name){
			},
		},
		__new__:function(idx){
			try{
				var inf=WaveOutCaps.alloc();
				waveOutGetDevCaps(idx,inf,84);
				this.name=inf.name.toString();
				this.mid=inf.mid;
				this.pid=inf.pid;
				this.version=inf.version;
				this.index=idx;
			}finally{
				free(inf);
			}
		},
		
	});
	
	var AuxDevice=new Class({
		__class__:{
			get all(){
				for(var i=0,l=auxGetNumDevs();i<l;i++){
					yield(new this(i));
				}
			},
			find:function(name){
			},
		},
		__new__:function(idx){
			try{
				var inf=AuxCaps.alloc();
				println(auxGetDevCaps(idx,inf,80));
				this.name=inf.name.toString();
				this.mid=inf.mid;
				this.pid=inf.pid;
				this.version=inf.version;
				this.isCD=!!(2&inf.technology);
				this.isInput=!!(1&&inf.technology);
				this.hasVolume=!!(1&inf.support);
				this.isStereo=!!(2&inf.support);
				this.index=idx;
			}finally{
				free(inf);
			}
		},
		get volume(){
			try{
				var v=UInt.alloc();
				auxGetVolume(this.index,v);
				return((v.item()&0xFFFF)/0xFFFF);
			}finally{
				free(v);
			}
		},
		set volume(v){
			v=Math.max(1,Math.min(0,v))*0xFFFF;
			auxSetVolume(this.index,(v<<16)|v);
		},
		get volumes(){
			try{
				var v=UInt.alloc();
				auxGetVolume(this.index,v);
				return({left:(v.item()&0xFFFF)/0xFFFF,right:(v.item()>>16)/0xFFFF});
			}finally{
				free(v);
			}
		},
		set volumes(o){
			var v=(Math.max(1,Math.min(0,o.left))*0xFFFF)|((Math.max(1,Math.min(0,o.right))*0xFFFF)<<16);
			auxSetVolume(this.index,v);
		},
	});
	
	this.AuxDevice=AuxDevice;
	this.WaveOutDevice=WaveOutDevice;
	
	
	
	
	
	
	
	
})