(function(){
	var {Window,ChildWindow}=require('Window');
	var {COM,Unknown,Dispatch,Result}=require('COM');
	var atl,atlClass;
	try{
		atl=WinLibrary.load('atl80.dll');
		atlClass='AtlAxWin80';
	}catch(e){
		try{
			atl=WinLibrary.load('atl71.dll');
			atlClass='AtlAxWin71';
		}catch(e){
			atl=WinLibrary.load('atl.dll');
			atlClass='AtlAxWin';
		}
	}
	var AtlAxWinInit=		atl.proc('AtlAxWinInit',[],Int);
	var AtlAxGetControl=	atl.proc('AtlAxGetControl',[UInt,Pointer],UInt);
	COM.init();
	AtlAxWinInit();
	
	var OleWindow=Unknown.define('OleWindow','{00000114-0000-0000-C000-000000000046}',{
		GetWindow:				[Pointer],
		ContextSensitiveHelp:	[Int],
	});
	var OleInPlaceActiveObject=OleWindow.define('OleInPlaceActiveObject','{00000117-0000-0000-C000-000000000046}',{
		TranslateAccelerator:	[Pointer],
		OnFrameWindowActivate:	[Int],
		OnDocWindowActivate:	[Int],
		ResizeBorder:			[Pointer,Pointer,Int],
		EnableModeless:			[Int],
	});
	
	
	var ATL=ChildWindow.define({
		className:atlClass,
		events:{
			create:function(){
				let _this=this;
				try{
					var ptr=Unknown.alloc();
					if(0==AtlAxGetControl(this.handle,ptr)){
						this.__unknownObject__=ptr.item();
						this.object=ptr.item()['to'+(this.constructor.objectInterface||'Dispatch')]();
						this.oleInPlaceActiveObject=ptr.item().toOleInPlaceActiveObject();
						this.root.observe('close',function(){
							free(_this.object, _this.oleInPlaceActiveObject,_this.__unknownObject__);
							_this.object=_this.oleInPlaceActiveObject=_this.__unknownObject__=null;
						});
					}
				}finally{
					free(ptr);
				}
			},
		},
	}).addMembers({
		__class__:{
			create:function(){
				COM.init();
				return(ChildWindow.create.apply(this,arguments));
			},
		},
		invoke:function(){
			var args=arguments;
			var _this=this;
			return(this.root.request(function(){
				return(_this.object.invoke.apply(_this.object,args));
			}));
		},
		get:function(){
			var args=arguments;
			var _this=this;
			return(this.root.request(function(){
				return(_this.object.get.apply(_this.object,args));
			}));
		},
		set:function(){
			var args=arguments;
			var _this=this;
			return(this.root.request(function(){
				return(_this.object.set.apply(_this.object,args));
			}));
		},
		$:function(){
			var args=arguments;
			var _this=this;
			return(this.root.request(function(){
				return(_this.object.$.apply(_this.object,args));
			}));
		},
	});
	var Trident=ATL.define({
		title:'Shell.Explorer.2',
		events:{
			create:function(){
				let _this=this;
				this.root.observe('message',function(e){
					if((e.message==0x100)&&(e.window.className=='Internet Explorer_Server')){
						return(0==_this.oleInPlaceActiveObject.TranslateAccelerator(e.struct));
					}
				});
			},
		},
	}).addMembers({
		update:function(content){
			var _this=this;
			this.root.request(function(){
				try{
					var ie=_this.object;
					var url=ie.get('LocationURL');
					if(!url){
						ie.invoke('Navigate','about:blank');
					}
					var doc=ie.get('Document');
					if(doc){
						var body=doc.get('body');
						if(!body){
							doc.invoke('Write',content);
						}else{
							body.set('innerHTML',content);
						}
					}
				}catch(e){
					println(e);
				}finally{
					free(doc,body);
				}
			});
			return(this);
		},
	});
	this.ATL=ATL;
	this.Trident=Trident;
})