(function(){
/*
		=		sqlite.proc('',[],Int),
*/
	var __join__=function(o,j,s,e)((o instanceof Array)?((s||"")+o.join(j)+(e||"")):String(o));
	var sqlite=Library.load("sqlite3.dll"),
		sqlite3_open=					sqlite.proc('sqlite3_open16',[WideString,Pointer],Int),
		sqlite3_errmsg=					sqlite.proc('sqlite3_errmsg16',[UInt],WideString),
		sqlite3_busy_timeout=			sqlite.proc('sqlite3_busy_timeout',[UInt,Int],Int),
		
		sqlite3_prepare=				sqlite.proc('sqlite3_prepare16_v2',[UInt,WideString,Int,Pointer,Int],Int),
		sqlite3_step=					sqlite.proc('sqlite3_step',[UInt],Int),
		sqlite3_finalize=				sqlite.proc('sqlite3_finalize',[UInt],Int),
		sqlite3_reset=					sqlite.proc('sqlite3_reset',[UInt],Int),
		
		sqlite3_bind_parameter_index=	sqlite.proc('sqlite3_bind_parameter_index',[UInt,MBString],Int),
		sqlite3_bind_int=				sqlite.proc('sqlite3_bind_int',[UInt,Int,Int],Int),
		sqlite3_bind_double=			sqlite.proc('sqlite3_bind_double',[UInt,Int,Double],Int),
		sqlite3_bind_blob=				sqlite.proc('sqlite3_bind_blob',[UInt,Int,Pointer,Int,Int],Int),
		sqlite3_bind_null=				sqlite.proc('sqlite3_bind_null',[UInt,Int],Int),
		sqlite3_bind_text=				sqlite.proc('sqlite3_bind_text16',[UInt,Int,WideString,Int,Int],Int),
		
		sqlite3_column_count=			sqlite.proc('sqlite3_column_count',[UInt],Int),
		sqlite3_column_name=			sqlite.proc('sqlite3_column_name16',[UInt,Int],WideString),
		sqlite3_column_type=			sqlite.proc('sqlite3_column_type',[UInt,Int],Int),
		sqlite3_column_bytes=			sqlite.proc('sqlite3_column_bytes',[UInt,Int],Int),
		sqlite3_column_text=			sqlite.proc('sqlite3_column_text16',[UInt,Int],WideString),
		sqlite3_column_blob=			sqlite.proc('sqlite3_column_blob',[UInt,Int],UInt),
		sqlite3_column_double=			sqlite.proc('sqlite3_column_double',[UInt,Int],Double),
		sqlite3_close=					sqlite.proc('sqlite3_close',[UInt],Int);
	
	var DB=new Class({
		__class__:{
			open:function(name){
				try{
					name=name||this.name||":memory:";
					name=name.path||name;
					var fp=!name.match(/^:/) && pref("",true).file(name).path.replace(/(\\[^\.]+)$/,"$1.db");
					var h=UInt.alloc();
					if(!sqlite3_open(fp||name,h)){
						return(new this(h.item(),fp));
					}else{
					throw(new Error("SQLite open error:"+ sqlite3_errmsg(this.handle).toString()));
					}
				}finally{
					h&&h.free();
				}
			},
			
			
			select:function(cores,order,limit,offset){
				var str="SELECT ";
				if(cores instanceof Array){
					var last=cores[cores.length-1]||{};
					if((cores.length>1)&&(typeof(last)=='object')&&!(last instanceof Array)){
						cores.pop();
					}else{
						last={};
					}
					if(!cores[0]){
						str+="*";
					}else if(cores[0] instanceof Array){
						str+=cores[0].join(',');
					}else if(typeof(cores[0])=='object'){
						let a=[];
						for each(let [n,v] in Iterator(cores[0])){
							a.push(v+" AS "+n);
						}
						str+=a.join(",");
					}else{
						str+=cores[0];
					}
					if(cores[1]){
						str+=" FROM "+__join__(cores[1]," ");
					}
					if(cores[2]){
						str+=" WHERE "+__join__(cores[2],") AND (","(",")");
					}
					if(cores[3]){
						str+=" GROUP BY "+__join__(cores[3],",");
						if(cores[4]){
							str+=" HAVING "+__join__(cores[4],") AND (","(",")");
						}
					}
					for each(let [n,v] in Iterator(last)){
						switch(n){
							case('except'):case('e'):case('-'):case('!'):{
								str+=' EXCEPT '+this.select(v);
								break;
							}case('intersect'):case('i'):case('*'):case('&'):{
								str+=' INTERSECT '+this.select(v);
								break;
							}case('all'):case('a'):case('+'):{
								str+=' UNION ALL '+this.select(v);
								break;
							}default:{
								str+=' UNION '+this.select(v);
								break;
							}
						}
					}
				}else{
					str+=String(cores);
				}
				if(order){
					str+=" ORDER BY "+__join__(order,",");
				}
				if(limit){
					str+=" LIMIT "+Number(limit);
					if(offset){
						str+=" OFFSET "+Number(offset);
					}
				}
				return(str);
			},
			insert:function(table,cols,or){
				var str="INSERT";
				var c=[],p=[];
				for each(let [n,v] in Iterator(cols)){
					c.push(n);
					p.push(v);
				}
				if(or){
					str+=" OR "+String(or).toUpperCase();
				}
				str+=" INTO "+table+" ("+c.join(",")+") VALUES("+p.join(",")+")";
				return(str);
			},
			update:function(table,where,cols,or){
				var str="UPDATE";
				if(or){
					str+=" OR "+String(or).toUpperCase();
				}
				str+=" "+table+' SET';
				if(cols instanceof Array){
					for(var i=0,l=cols.length;i<l;i++){
						str+=" "+cols[i]+"=$"+cols[i];
					}
				}else{
					for each(let [n,v] in Iterator(cols)){
						str+=" "+n+"="+v;
					}
				}
				if(where){
					str+=" WHERE "+__join__(where,") AND (","(",")");
				}
				return(str);
			},
			remove:function(table,where)("DELETE FROM "+table+(where?(" WHERE "+where):"")),
			
		},
		__new__:function(handle,file){
			this.handle=handle;
			if(file){
				this.file=new File(file);
			}
			this.tables={};
			this.views={};
			this.indexes={};
			this.triggers={};
			for each(let [n,v] in Iterator(this.constructor.tables||{})){
				this[n]=this.tables[n]=new Table(this,n,v);
			}
			for each(let [n,v] in Iterator(this.constructor.views||{})){
				this[n]=this.views[n]=new View(this,n,v);
			}
			for each(let [n,v] in Iterator(this.constructor.indexes||{})){
				this[n]=this.indexes[n]=new Index(this,n,v);
			}
			for each(let [n,v] in Iterator(this.constructor.triggers||{})){
				this[n]=this.triggers[n]=new Trigger(this,n,v);
			}
		},
		set timeout(ms){
			this.__timeout__=ms;
			sqlite3_busy_timeout(this.handle, ms);
		},
		get timeout()(this.__timeout__),
		free:function(){
			if(this.handle){
				sqlite3_close(this.handle);
				this.handle=null;
			}
			return(this);
		},
		create:function(defs){
			for each(let [n,v] in Iterator(defs.tables||{})){
				this[n]=this.tables[n]=new Table(this,n,v);
			}
			for each(let [n,v] in Iterator(defs.views||{})){
				this[n]=this.views[n]=new View(this,n,v);
			}
			for each(let [n,v] in Iterator(defs.indexes||{})){
				this[n]=this.indexes[n]=new Index(this,n,v);
			}
			for each(let [n,v] in Iterator(defs.triggers||{})){
				this[n]=this.triggers[n]=new Trigger(this,n,v);
			}
			for each(let [n,v] in Iterator(this.tables)){
				v.create();
			}
			for each(let [n,v] in Iterator(this.views)){
				v.create();
			}
			for each(let [n,v] in Iterator(this.indexes)){
				v.create();
			}
			for each(let [n,v] in Iterator(this.triggers)){
				v.create();
			}
		},
		table:function(n)(this.tables[n]||new Table(this,n)),
		view:function(n)(this.views[n]||new View(this,n)),
		index:function(n)(this.indexes[n]||new Index(this,n)),
		trigger:function(n)(this.triggers[n]||new Trigger(this,n)),
		begin:function(c)(this.execute("BEGIN TRANSACTION"+(c?(" ON CONFLICT "+c):""))),
		end:function()(this.execute("END TRANSACTION")),
		commit:function()(this.execute("COMMIT TRANSACTION")),
		save:function(name)(this.execute("SAVEPOINT "+name)),
		release:function(name)(this.execute("RELEASE "+name)),
		rollback:function(name)(this.execute("ROLLBACK "+(name?(" TO "+name):"TRANSACTION"))),
		vaccum:function()(this.execute("VACUUM")),
		attach:function(n,a)(this.execute("ATTACH $n AS $a",{n:pref("",true).file(n).path.replace(/(\\[^\.]+)$/,"$1.db"),a:a})),
		detach:function(a)(this.execute("DETACH $a",{a:a})),
		pragma:function(o){
			for each(let [n,v] in Iterator(o||{})){
				this.execute("PRAGMA "+n+"="+v);
			}
		},
		
		__prepare__:function(q){
			try{
				var st=UInt.alloc();
				if(sqlite3_prepare(this.handle,q,-1,st,0)==0){
					return(st.item());
				}else{
					throw(new Error("SQLite statement error:"+ sqlite3_errmsg(this.handle).toString()));
				}
			}finally{
				st&&st.free();
			}
		},
		__bind__:function(st,p){
			var bind=function(index,value){
				if(index==0){
				}else if(value === null){
					sqlite3_bind_null(st,index);
				}else if((value instanceof Pointer)&&value.size){
					sqlite3_bind_blob(st,index,value,value.size,-1);
				}else if(typeof(value)=="number"){
					if((Math.floor(value)==value) && (Math.abs(value)<0x80000000)){
						sqlite3_bind_int(st,index,value);
					}else{
						sqlite3_bind_double(st,index,value);
					}
				}else{
					sqlite3_bind_text(st,index, String(value), -1, -1);
				}
			}
			if(!p || (typeof(p)!='object')){
				bind(1,p||null);
			}else if(p instanceof Array){
				for(var i=0,l=p.length;i<l;i++){
					bind(i+1,p[i]||null);
				}
			}else{
				for each(let [n,v] in Iterator(p)){
					bind(sqlite3_bind_parameter_index(st,'$'+String(n)),v);
				}
			}
		},
		execute:function(q,p,a){
			var st,sp,g;
			try{
				try{
					if(arguments.length==1){
						if(sqlite3_step(st=this.__prepare__(q))!=101){
							throw(new Error(sqlite3_errmsg(this.handle)));
						}
					}else{
						if((arguments.length==3)&&(typeof(p)=='object')&&(typeof(a)!='object')){
							g=$G(p);
							sp=!!a && (new Date()).getTime()+String.random(8);
						}else{
							g=$G(Array.slice(arguments,1));
						}
						sp && this.execute("SAVEPOINT "+sp);
						st=this.__prepare__(q);
						for(let o in g){
							sqlite3_reset(st);
							this.__bind__(st,o);
							if(sqlite3_step(st)!=101){
								throw(new Error(sqlite3_errmsg(this.handle)));
							}
						}
						sp&&this.execute("RELEASE "+sp);
					}
				}finally{
					st&&sqlite3_finalize(st);
				}
			}catch(e){
				sp&&this.execute("ROLLBACK TO "+sp);
				throw(e);
			}
			return(this);
		},
		query:function(q,params){
			try{
				var st=this.__prepare__(q),res;
				if(params){
					this.__bind__(st,params);
				}
				var count=sqlite3_column_count(st)
				var cns=new Array(count);
				for(var i=0;i<count;i++){
					cns[i]=sqlite3_column_name(st,i).toString();
				}
				while(res=sqlite3_step(st)){
					if(res==5){
						sleep(40);
						continue;
					}else if(res==100){
						var row=new Array(count);
						row.keys=cns;
						for(var i=0;i<count;i++){
							switch(sqlite3_column_type(st,i)){
								case(5):{
									row[cns[i]]=row[i]=null;
									break;
								}case(4):{
									(row[cns[i]]=row[i]=new (Byte.pointer)(sqlite3_column_blob(st,i))).count=sqlite3_column_bytes(st,i)
									break;
								}case(3):{
									row[cns[i]]=row[i]=sqlite3_column_text(st,i).toString();
									break;
								}default:{
									row[cns[i]]=row[i]=sqlite3_column_double(st,i);
									break;
								}
							}
						}
						yield(row);
					}else{
						break;
					}
				}
			}finally{
				st&&sqlite3_finalize(st);
			}
		},
		select:function(cores,order,limit,offset,params)(this.query(this.constructor.select(cores,order,limit,offset),params)),
		row:function(cores,order,limit,offset,params)(this.select(cores,order,limit,offset,params).first()),
		col:function(n,cores,order,limit,offset,params)(this.select(cores,order,limit,offset,params).first()[n]),
		cols:function(n,cores,order,limit,offset,params)(this.select(cores,order,limit,offset,params).map(n)),
		
		get lastID(){
			for(let row in this.query("SELECT last_insert_rowid()")){
				return(row[0]);
			}
		},
	});
	
	var TableMixin=new Class({
		__insert__:function(or,values,cols,opt){
			if(typeof(values)=='string'){
				this.db.execute("INSERT OR "+or+" INTO "+this.name
					+((cols instanceof Array)?(' ('+cols.join(",")+") "):" ")+values, opt);
			}else{
				var q,c=[],p=[],sp=(new Date()).getTime()+String.random(8);
				if(cols instanceof Array){
					for(var i=0,l=cols.length;i<l;i++){
						c.push(cols[i]);
						p.push(cols[i]);
					}
				}else if(cols){
					for each(let [n,v] in Iterator(cols)){
						c.push(n);
						p.push(v);
					}
				}
				try{
					if(opt){
						this.db.execute("SAVEPOINT "+sp);
					}
					for(let row in $G(values)){
						if(!q){
							if(!cols){
								for each(let [n,v] in Iterator(row)){
									c.push(n);
									p.push(n);
								}
							}
							q="INSERT OR "+or+" INTO "+this.name+"("+c.join(',')+") VALUES($"+c.join(",$")+")";
						}
						var o={};
						for(var i=0,l=c.length;i<l;i++){
							o[c[i]]=row[p[i]];
						}
						this.db.execute(q,o);
					}
					if(opt){
						this.db.execute("RELEASE "+sp);
					}
				}catch(e){
					if(opt){
						this.db.execute("ROLLBACK TO "+sp);
					}
					throw(e);
				}
			}
			return(this);
		},
		
		__update__:function(or,where,values,opt){
			var o={},sp=(new Date()).getTime()+String.random(8);
			if(where instanceof Array){
				o=Object.extend(o,where[1]||{});
				where=where[0]||"";
			}
			if(opt){
				this.db.execute("SAVEPOINT "+sp);
			}
			try{
				var a=[];
				for each(let [n,v] in Iterator(values)){
					a.push(n+'=$'+n);
					o[n]=v;
				}
				var q="UPDATE OR "+or+" "+this.name+' SET '+a.join(',');
				if(where){
					q+=" WHERE "+__join__(where,") AND (","(",")");
				}
				this.db.execute(q,o);
				if(opt){
					this.db.execute("RELEASE "+sp);
				}
			}catch(e){
				if(opt){
					this.db.execute("ROLLBACK TO "+sp);
				}
				throw(e);
			}
			return(this);
		},
		
		insert:				function(v,c,o)(this.__insert__("IGNORE",v,c,o)),
		insertOrRollback:	function(v,c,o)(this.__insert__("ROLLBACK",v,c,o)),
		insertOrAbort:		function(v,c,o)(this.__insert__("ABORT",v,c,o)),
		insertOrFail:		function(v,c,o)(this.__insert__("FAIL",v,c,o)),
		insertOrIgnore:		function(v,c,o)(this.__insert__("IGNORE",v,c,o)),
		insertOrReplace:	function(v,c,o)(this.__insert__("REPLACE",v,c,o)),
		replace:			function(v,c,o)(this.__insert__("REPLACE",v,c,o)),
		update:				function(w,v,o)(this.__update__("IGNORE",w,v,o)),
		updateOrIgnore:		function(w,v,o)(this.__update__("IGNORE",w,v,o)),
		updateOrRollback:	function(w,v,o)(this.__update__("ROLLBACK",w,v,o)),
		updateOrAbort:		function(w,v,o)(this.__update__("ABORT",w,v,o)),
		updateOrFail:		function(w,v,o)(this.__update__("FAIL",w,v,o)),
		updateOrReplace:	function(w,v,o)(this.__update__("REPLACE",w,v,o)),
		
		remove:function(where,params){
			this.db.execute("DELETE FROM "+this.name+" WHERE "+where,params);
			return(this);
		},
		clear:function(){
			this.db.execute("DELETE FROM "+this.name);
		},
		
	});
	
	var Table=new Class({},TableMixin,{
		__new__:function(db,name,def){
			this.db=db;
			this.name=name;
			this.definition=(def instanceof Array)?def:[def];
		},
		get exists()(0!=Number(this.db.col('c',"SELECT count(*) FROM sqlite_master WHERE type=$type AND name=$name",{type:"table",name:this.name}))),
		create:function(cores,order,limit,offset){
			var s="CREATE TABLE IF NOT EXISTS "+this.name;
			if(arguments.length==0){
				[cores,order,limit,offset]=this.definition||[];
			}
			if(typeof(limit)!="undefined"){
				s+=" AS "+this.db.constructor.select(cores,order,limit,offset)
			}else{
				if(cores instanceof Array){
					s+=' ('+cores.join(",")+")";
				}else if(typeof(cores)=='object'){
					var d=[];
					for each(let [n,v] in Iterator(cores)){
						if(v){
							d.push(n+' '+v);
						}else{
							d.push(n);
						}
					}
					s+=' ('+d.join(",");
				}else{
					s+=" ("+cores;
				}
				if(order){
					s+=','+__join__(order,",");
				}
				s+=')';
			}
			this.db.execute(s);
			this.db[this.name]=this.db.tables[this.name]=this.db.tables[this.name]||this;
			return(this);
		},
		createTemp:function(){
			this.db.execute("CREATE TEMP TABLE IF NOT EXISTS "+this.name+' ('+Array.join(arguments,',')+')');
			return(this);
		},
		createAs:function(cores,order,limit){
			this.db.execute("CREATE TABLE IF NOT EXISTS "+this.name+' AS '+this.db.constructor.select(cores,order,limit));
			return(this);
		},
		createTempAs:function(cores,order,limit){
			this.db.execute("CREATE TEMP TABLE IF NOT EXISTS "+this.name+' AS '+this.db.constructor.select(cores,order,limit));
			return(this);
		},
		
		add:function(cols){
			if(!(cols instanceof Array)){
				cols=[cols];
			}
			for(var i=0,l=cols.length;i<l;i++){
				this.db.execute("ALTER TABLE "+this.name+" ADD "+cols[i]);
			}
		},
		rename:function(name){
			this.db.execute("ALTER TABLE "+this.name+" RENAME TO "+name);
			return(this.db[name]=this.db.tables[name]=new Table(this.db,name,this.definition));
		},
		drop:function()(this.db.execute("DROP TABLE IF EXISTS "+this.name)),
		
	});
	var View=new Class({},TableMixin,{
		__new__:function(db,name,def){
			this.db=db;
			this.name=name;
			this.definition=(def instanceof Array)?def:[def];
		},
		get exists()(0!=Number(this.db.col('c',"SELECT count(*) FROM sqlite_master WHERE type=$type AND name=$name",{type:"view",name:this.name}))),
		
		create:function(cores,order,limit,offset){
			if(arguments.length==0){
				[cores,order,limit,offset]=this.definition||[];
			}
			this.db.execute("CREATE VIEW IF NOT EXISTS "+this.name+' AS '+this.db.constructor.select(cores,order,limit,offset));
			this.db[this.name]=this.db.views[this.name]=this.db.views[this.name]||this;
			return(this);
		},
		createTemp:function(cores,order,limit,offset){
			this.db.execute("CREATE TEMP VIEW IF NOT EXISTS "+this.name+' AS '+this.db.constructor.select(cores,order,limit,offset));
			return(this);
		},
		drop:function()(this.db.execute("DROP VIEW IF EXISTS "+this.name)),
	});
	
	var Index=new Class({
		__new__:function(db,name,def){
			this.db=db;
			this.name=name;
			this.definition=(def instanceof Array)?def:[def];
		},
		get exists()(0!=Number(this.db.col('c',"SELECT count(*) FROM sqlite_master WHERE type=$type AND name=$name",{type:"index",name:this.name}))),
		
		create:function(table,cols){
			if(arguments.length==0){
				[table,cols]=this.definition||[];
			}
			this.db.execute("CREATE INDEX IF NOT EXISTS "+this.name+' ON '+table+' ('+__join__(cols)+')');
			this.db[this.name]=this.db.indexes[this.name]=this.db.indexes[this.name]||this;
			return(this);
		},
		createUnique:function(table,cols){
			this.db.execute("CREATE UNIQUE INDEX IF NOT EXISTS "+this.name+' ON '+table+' ('+__join__(cols)+')');
			return(this);
		},
		drop:function()(this.db.execute("DROP INDEX IF EXISTS "+this.name)),
	});
	
	var Trigger=new Class({
		__new__:function(db,name,def){
			this.db=db;
			this.name=name;
			this.definition=(def instanceof Array)?def:[def];
		},
		get exists()(0!=Number(this.db.col('c',"SELECT count(*) FROM sqlite_master WHERE type=$type AND name=$name",{type:"trigger",name:this.name}))),
		
		create:function(event,table,stmts,params){
			if(arguments.length==0){
				[event,table,stmts,params]=this.definition||[];
			}
			this.db.execute("CREATE TRIGGER IF NOT EXISTS "+this.name+" "+(event||"INSERT")+" ON "+
				((table instanceof Array)?(table[0]+' WHEN '+table[1]):table)+" BEGIN "+__join__(stmts,";")+' END');
			this.db[this.name]=this.db.triggers[this.name]=this.db.triggers[this.name]||this;
			return(this);
		},
		createTemp:function(event,table,stmts,params){
			this.db.execute("CREATE TEMP TRIGGER IF NOT EXISTS "+this.name+" "+(event||"INSERT")+" ON "+
				((table instanceof Array)?(table[0]+' WHEN '+table[1]):table)+" BEGIN "+__join__(stmts,";")+' END');
			return(this);
		},
		drop:function()(this.db.execute("DROP TRIGGER IF EXISTS "+this.name)),
	});
	
	this.DB=DB;
	this.Table=Table;
	this.View=View;
	this.Index=Index;
	this.Trigger=Trigger;
})