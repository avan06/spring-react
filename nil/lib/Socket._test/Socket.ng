(function(){
	var ws2=WinLibrary.load("Ws2_32.dll");
	var
		WSAData=new Struct({
			version:		Word,
			highVersion:	Word,
			description:	[Byte,257],
			systemStatus:	[Byte,129],
			maxSockets:		UShort,
			maxUdpDg:		UShort,
			vendorInfo:		Pointer,
		}),
		sockaddr_in=new Struct({
			family:			Short,
			port:			UShort,
			addr:			UInt,
			zero:			[Byte,8],
		}),
		
		fd_set=new Struct({
			count:			UInt,
			array:			[UInt,64],
		}),
		timeval=new Struct({
			sec:Int,
			usec:Int,
		}),
		addrinfo=new Struct();
	
	addrinfo.defineMembers({
		flags:		Int,
		family:		Int,
		sockType:	Int,
		protocol:	Int,
		addrLen:	UInt,
		name:		WideString,
		addr:		[sockaddr_in],
		next:		[addrinfo],
	});
	
	
	
	var 
		WSAStartup=			ws2.proc("WSAStartup",[Word,WSAData],Int),
		
		GetAddrInfo=		ws2.proc('GetAddrInfoW',[WideString,WideString,addrinfo,Pointer],Int),
		FreeAddrInfo=		ws2.proc('FreeAddrInfoW',[addrinfo],Int),
		GetNameInfo=		ws2.proc('GetNameInfoW',[sockaddr_in,UInt,WideString,UInt,WideString,UInt,Int],Int),
		
		htons=				ws2.proc('htons',[UShort],UShort),
		htonl=				ws2.proc('htonl',[UInt],UInt),
		ntohs=				ws2.proc('ntohs',[UShort],UShort),
		ntohl=				ws2.proc('ntohl',[UInt],UInt),
		
		socket=				ws2.proc('socket',[Int,Int,Int],UInt),
		ioctlsocket=		ws2.proc('ioctlsocket',[UInt,Int,Pointer],Int),
		closesocket=		ws2.proc('closesocket',[UInt],Int),
		setsockopt=			ws2.proc('setsockopt',[UInt,Int,Int,Pointer,UInt],Int),
		getsockopt=			ws2.proc('getsockopt',[UInt,Int,Int,Pointer,UInt],Int,true),
		
		
		shutdown=			ws2.proc('shutdown',[UInt,Int],Int),
		bind=				ws2.proc('bind',[UInt,sockaddr_in,UInt],Int,true),
		listen=				ws2.proc('listen',[UInt,Int],Int,true),
		accept=				ws2.proc('accept',[UInt,sockaddr_in,Pointer],UInt),
		
		connect=			ws2.proc('connect',[UInt,sockaddr_in,UInt],Int,true),
		
		send=				ws2.proc('send',[UInt,UInt,UInt,Int],Int,true),
		recv=				ws2.proc('recv',[UInt,UInt,UInt,Int],Int,true),
		recvfrom=			ws2.proc('recvfrom',[UInt,UInt,UInt,Int,sockaddr_in,UInt],Int,true),
		sendto=				ws2.proc('sendto',[UInt,UInt,UInt,Int,sockaddr_in,UInt],Int,true),
		
		select=				ws2.proc('select',[Int,fd_set,fd_set,fd_set,timeval],Int),
		
		WSAGetLastError=	ws2.proc("WSAGetLastError",[],UInt),
		WSACleanup=			ws2.proc('WSACleanup',[],UInt);
	
	
	var wsaData=WSAData.alloc();
	if(WSAStartup(0x0002,wsaData)!=0){
		var e=WSAGetLastError();
		WSACleanup();
		throw("socket error: initialization failure ("+e+')');
	}
	
	var ssl32=Library.load('libssl32.dll');
	var eay32=Library.load('libeay32.dll');
	var locking_function=ThreadSafeCallback.define([Int,Int,Int,Int],Int);
	
	var
		WaitForSingleObject=		kernel32.proc('WaitForSingleObject',[UInt,UInt],UInt,true),
		CreateMutex=				kernel32.proc('CreateMutexW',[Pointer,Int,WideString],Int),
		ReleaseMutex=				kernel32.proc('ReleaseMutex',[UInt],Int),
		GetCurrentThreadId=			kernel32.proc('GetCurrentThreadId',[],UInt),
		ERR_get_error=				eay32.proc('ERR_get_error',[],UInt),
		ERR_error_string_n=			eay32.proc('ERR_error_string_n',[UInt,MBString,UInt],UInt),
		CRYPTO_num_locks=			eay32.proc('CRYPTO_num_locks',[],UInt),
		CRYPTO_set_locking_callback=eay32.proc('CRYPTO_set_locking_callback',[Pointer],UInt),
		CRYPTO_set_id_callback=		eay32.proc('CRYPTO_set_id_callback',[Pointer],UInt),
		
		SSL_get_error=				ssl32.proc('SSL_get_error',[UInt,Int],Int),
		SSL_library_init=			ssl32.proc('SSL_library_init',[],UInt),
		SSL_load_error_strings=		ssl32.proc('SSL_load_error_strings',[],UInt),
		SSL_CTX_new=				ssl32.proc('SSL_CTX_new',[UInt],UInt),
		SSLv23_client_method=		ssl32.proc('SSLv23_client_method',[],UInt),
		SSL_new=					ssl32.proc('SSL_new',[UInt],Int),
		SSL_set_fd=					ssl32.proc('SSL_set_fd',[UInt,UInt],Int),
		SSL_connect=				ssl32.proc('SSL_connect',[UInt],Int),
		SSL_read=					ssl32.proc('SSL_read',[UInt,UInt,UInt],Int),
		SSL_peek=					ssl32.proc('SSL_peek',[UInt,UInt,UInt],Int),
		SSL_write=					ssl32.proc('SSL_write',[UInt,UInt,UInt],Int),
		SSL_shutdown=				ssl32.proc('SSL_shutdown',[UInt],Int),
		SSL_free=					ssl32.proc('SSL_free',[UInt],Int);
	
	var ssl_error=function(){
		try{
			var buf=Byte.alloc(320);
			ERR_error_string_n(ERR_get_error(),buf,319);
			return(buf.toString());
		}finally{
			buf&&buf.free();
		}
	};
	
	/*
	AF_INET=2
	AF_INET6=23
	SOCK_STREAM=1
	SOCK_DGRAM=2
	
	INADDR_ANY=0
	
	SOL_SOCKET=0xFFFF
	*/
	
	var DNSError=new Class({
		__new__:function(code){
			this.code=code;
			this.message='DNS error: '+(({
				8:'not enough emory',
				11001:'host not found',
				11002:'temporary failure',
				11003:'non-recoverable failure',
			})[code]||"error code="+code)
		},
	});
	
	var IPAddress=new Class({
		__class__:{
			version:4,
		},
		__new__:function(host,port){
			try{
				if(typeof(host)=='string'){
					var inf=addrinfo.pointer.alloc();
					var a=[];
					var r=GetAddrInfo(host,null,null,inf);
					if(r==0){
						for(var inf2=inf.item();inf2.valueOf();inf2=inf2.next){
							a.push(inf2.addr.addr*1);
						}
					}else{
						throw(new DNSError(r));
					}
					this.__addrs__=a;
				}else{
					this.__addrs__=[host*1];
				}
				this.port=port;
			}finally{
				inf&&inf.item() && FreeAddrInfo(inf.item());
				inf&&inf.free();
			}
		},
		
		get name(){
			if(!this.__name__){
				try{
					var sa=sockaddr_in.alloc();
					var buf=WChar.alloc(256);
					sa.family=2;
					sa.addr=this.__addrs__[0];
					if(0==GetNameInfo(sa,16,buf,255,null,0,0x0)){
						this.__name__=buf.toString();
					}
				}finally{
					sa&&sa.free();
					buf&&buf.free();
				}
			}
			return(this.__name__);
		},
		get addresses(){
			if(!this.__addresses__){
				var a=this.__addrs__;
				var res=new Array(a.length);
				for(var i=0,l=a.length;i<l;i++){
					res[i]=let(v=a[i])((v&0xFF)+'.'+((v>>8)&0xFF)+'.'+((v>>16)&0xFF)+'.'+((v>>>24)));
				}
				this.__addresses__=res;
			}
			return(this.__addresses__);
		},
		get address()(this.addresses[0]),
		
		get rawAddress()(this.__addrs__[0]),
		get rawAdresses()(this.__addrs__),
		
	});
	
	
	var ConnectionTimeout=new Error('socket error: connection timeout');
	var ConnectError=new Class({
		__new__:function(code){
			this.message='socket error: connection failed('+code+')';
			this.code=code;
		}
	});
	
	var tcp_connect=function(host,timeout){
		try{
			var port=host.port;
			var v=UInt.alloc().update(1);
			var sa=sockaddr_in.alloc();
			sa.family=2;
			sa.port=htons(port);
			sa.addr=host.__addrs__[0];
			var sock=socket(2,1,6);
			if(0!=ioctlsocket(sock,0x8004667e,v)){
				throw('socket error: ioctlsocket(FIONBIO=true)');
			}
			try{
				connect(sock,sa,16);
			}catch(e if e.code==10035){
				var tv=null;
				if(typeof(timeout)!='undefined'){
					tv=timeval.alloc();
					if(timeout>0){
						tv.sec=Math.floor(timeout/1000);
						tv.usec=1000*(timeout%1000);
					}else{
						tv.sec=0;
						tv.usec=1;
					}
				}
				var fd=fd_set.alloc();
				fd.count=1;
				fd.array.update(sock);
				if(0==select(0,null,fd,null,tv)){
					throw(ConnectionTimeout);
				}
				var c=UInt.alloc();
				if(getsockopt(sock,0xFFFF,0x1007,v.update(0),c.update(4))==0){
					if(v.item()!=0){
						throw(new ConnectError(v.item()));
					}
				}
			}
			return(sock);
		}finally{
			v&&		v.free();
			sa&&	sa.free();
			tv&&	tv.free();
			fd&&	fd.free();
			c&&		c.free();
		}
	};
	
	
	var TCP=new Class({
		__class__:{
			port:23,
			connect:function(host,port,timeout){
				[,host,port]=String(host).match(/^(.*?):(.*)$/)||[,host,port];
				return(new TCPStream(tcp_connect(new IPAddress(host,port||this.port),timeout),host));
			},
		},
	});
	
	
	var TCPServer=new Class({
		__new__:function(port,addr,logsize){
			try{
				this.host=(new IPAddress(addr||0,port||23));
				this.logSize=logsize=logsize||64;
				
				var sock=socket(2,1,6);
				var sa=sockaddr_in.alloc();
				sa.family=2;
				sa.port=htons(this.host.port);
				sa.addr=this.host.__addrs__[0];
				var v=UInt.alloc().update(1);
				setsockopt(sock,0xFFFF,4,v,4);
				bind(sock,sa,16);
				listen(sock,this.logSize);
				this.socket=sock;
			}finally{
			}
		},
		accept:function(timeout){
			var tv=null;
			try{
				if(typeof(timeout)!='undefined'){
					tv=timeval.alloc();
					if(timeout>0){
						tv.sec=Math.floor(timeout/1000);
						tv.usec=1000*(timeout%1000);
					}else{
						tv.sec=0;
						tv.usec=1;
					}
					var fd=fd_set.alloc();
					fd.count=1;
					fd.array.update(this.socket);
					if(0==select(0,fd,null,null,tv)){
						return(void(0));
					}
				}
				
				var sa=sockaddr_in.alloc();
				var sz=UInt.alloc().update(16);
				var sock=accept(this.socket,sa,sz);
				var v=UInt.alloc().update(1);
				if(0!=ioctlsocket(sock,0x8004667e,v)){
					throw('socket error: ioctlsocket(FIONBIO=true)');
				}
				return(new TCPStream(sock,new IPAddress(sa.addr,sa.port)));
			}catch(e if e.code==10035){
				return(void(0));
			}finally{
				tv&&	tv.free();
				fd&&	fd.free();
				sa&&	sa.free();
				sz&&	sz.free();
				v&&		v.free();
			}
		},
		free:function(){
			this.socket && closesocket(this.socket);
		},
	});
	
	var eofCheckBuffer=UInt.alloc().valueOf();
	var TCPStream=new Class({},StreamMixin,{
		__new__:function(socket,host){
			this.socket=socket;
			this.host=host;
		},
		
		__read__:function(addr,size){
			try{
				var r=recv(this.socket,addr,size,0);
				return(r);
			}catch(e if e.code==10035){
				return(0);
			}
		},
		
		get __eof__(){
			try{
				return(recv(this.socket,eofCheckBuffer,4,2)==0);//MSG_PEEK
			}catch(e){
				return(e.code!=10035)
			}
		},
		
		__write__:function(addr,size){
			var addr2=addr, size2=size, res=0;
			try{
				while(size2>0){
					var s=send(this.socket,addr2,Math.min(size2,1024),0);
					res+=s;
					addr2+=s;
					size2-=s;
				}
			}catch(e if e.code==10035){
			}
			return(res);
		},
		__close__:function(read,write){
			if(read){
				shutdown(this.socket,write?2:1);
			}
			if(write){
				shutdown(this.socket,0);
			}
		},
		__free__:function(){
			this.socket && closesocket(this.socket);
			this.socket=null;
		},
	});
	
	var init_mutex=new Mutex();
	var SSL=new Class({
		__class__:{
			port:22,
			__initialize__:function(){
				try{
					init_mutex.lock();
					if(!this.__context__){
						SSL_library_init();
						SSL_load_error_strings();
						
						var cnt=CRYPTO_num_locks();
						var muxs=UInt.alloc(cnt);
						for(var i=0;i<cnt;i++){
							var m=CreateMutex(null,0,null);
							muxs.inc(i).update(CreateMutex(null,0,null));
						}
						this.__fpLock__=Hex.decode('55 8b ec 8b 45 08 83 e0 01 74 16 6a ff 8b 4d 0c 8b 14 8d cc cc cc cc 52 b8 ee ee ee ee ff d0 eb 12 8b 4d 0c 8b 14 8d cc cc cc cc 52 b8 dd dd dd dd ff d0 5d c3');
						UInt.write(this.__fpLock__.inc(19).valueOf(),muxs.valueOf());
						UInt.write(this.__fpLock__.inc(39).valueOf(),muxs.valueOf());
						UInt.write(this.__fpLock__.inc(25).valueOf(),kernel32.getCFunction('WaitForSingleObject').valueOf());
						UInt.write(this.__fpLock__.inc(45).valueOf(),kernel32.getCFunction('ReleaseMutex').valueOf());
						CRYPTO_set_locking_callback(this.__fpLock__);
						
						this.__fpGetID__=Hex.decode('55 8B EC B8 EE EE EE EE FF D0 5D C3');
						UInt.write(this.__fpGetID__.inc(4).valueOf(),kernel32.getCFunction('GetCurrentThreadId').valueOf());
//						CRYPTO_set_id_callback(this.__fpGetID__);
						
						this.__context__=SSL_CTX_new(SSLv23_client_method());
					}
				}finally{
					init_mutex.unlock();
				}
			},
			
			
			connect:function(host,port,proxy,timeout){
				if(!this.__context__){
					this.__initialize__();
				}
				var sock;
				if(host instanceof TCPStream){
					sock=host.socket;
				}else if(proxy){
				}else{
					[,host,port]=String(host).match(/^(.*?):(.*)$/)||[,host,port];
					sock=tcp_connect(new IPAddress(host,port||this.port),timeout);
				}
				var ssl=SSL_new(this.__context__);
				if(!ssl){
					println("no ssl");
				}
				SSL_set_fd(ssl, sock);
				SSL_connect(ssl);
				return(new SSLStream(ssl,sock,host));
			},
		},
	});
	var SSLStream=new Class({},StreamMixin,{
		__new__:function(ssl,socket,host){
			this.ssl=ssl;
			this.socket=socket;
			this.host=host;
		},
		
		__read__:function(addr,size){
			var r=SSL_read(this.ssl,addr,size);
			if(r<0){
				var err=SSL_get_error(this.ssl,r);
				if((err==2)||(err==3)){
					return(0);
				}else{
					throw(new Error(ssl_error()));
				}
			}
			return(r);
		},
		
		get __eof__(){
			var r=SSL_peek(this.ssl,eofCheckBuffer,4);
			if(r<0){
				var err=SSL_get_error(this.ssl,r);
				if((err==2)||(err==3)){
					return(false);
				}else{
					throw(new Error(ssl_error()));
				}
			}
			return(r==0);
		},
		
		__write__:function(addr,size){
			var r=SSL_write(this.ssl,addr,size);
			if(r<0){
				var err=SSL_get_error(this.ssl,r);
				if((err==2)||(err==3)){
					return(0);
				}else{
					throw(new Error(ssl_error()));
				}
			}
			return(r);
		},
		__close__:function(read,write){
			this.__shutdownState__=(this.__shutdownState__||0)|(read?1:0)|(write?2:0);
			if(this.__shutdownState__&0x3){
				this.ssl&& SSL_shutdown(this.ssl);
				this.ssl=0;
				SSL_free(this.ssl);
			}
		},
		__free__:function(){
			if(this.ssl){
				SSL_shutdown(this.ssl);
				closesocket(this.socket);
				SSL_free(this.ssl);
				this.ssl=this.socket=0;
			}
		},
	});
	
	
	
	
	
	
	
	
	
	var UDP=new Class({
		__class__:{
			send:function(obj,host,port,bc){
				try{
					var s=new UDPSendStream(host,port,bc);
					s.write(obj);
				}finally{
					free(s);
				}
			},
			broadcast:function(obj,addr,port){
				try{
					var s=new UDPSendStream(addr,port,true);
					s.write(obj);
				}finally{
					free(s);
				}
			},
		},
	});
	
	var UDPSendStream=new Class({},StreamMixin,{
		__new__:function(host,port,bc){
			this.host=(new IPAddress(host,port||this.port));
			var sa=sockaddr_in.alloc();
			sa.family=2;
			sa.port=htons(this.host.port);
			sa.addr=this.host.__addrs__[0];
			this.sockaddr=sa;
			this.socket=socket(2,2,17);
			
			if(bc){
				try{
					var data=UInt.alloc().update(1);
					setsockopt(this.socket,0xFFFF,0x0020,data,4);
				}finally{
					free(data);
				}
			}
		},
		__write__:function(addr,size){
			try{
				var res=sendto(this.socket,addr,size,0,this.sockaddr,16);
				return(res);
			}catch(e if e.code==10035){
				return(0);
			}
		},
		__free__:function(){
			this.sockaddr&&this.sockaddr.free();
			this.socket && closesocket(this.socket);
		},
	});
	var UDPServer=new Class({},EventMixin,{
		__new__:function(port,addr){
			try{
				var sock=socket(2,2,17);
				var sa=sockaddr_in.alloc();
				sa.family=2;
				sa.port=htons(port);
				sa.addr=(typeof(addr)=='undefined')?0:(new IPAddress(addr)).__addrs__[0];
				var v=UInt.alloc().update(1);
				setsockopt(sock,0xFFFF,4,v,4);
				bind(sock,sa,16);
				this.socket=sock;
			}finally{
				sa&&	sa.free();
				v&&		v.free();
			}
			
		},
		receive:function(type,timeout){
			var tv=null;
			try{
				if(typeof(timeout)!='undefined'){
					tv=timeval.alloc();
					if(timeout>0){
						tv.sec=Math.floor(timeout/1000);
						tv.usec=1000*(timeout%1000);
					}else{
						tv.sec=0;
						tv.usec=1;
					}
					var fd=fd_set.alloc();
					fd.count=1;
					fd.array.update(this.socket);
					if(0==select(0,fd,null,null,tv)){
						return(void(0));
					}
				}
				var size,res,f=type instanceof Array;
				if(typeof(type=(f?type[0]:type))=='number'){
					size=type;
					type=Byte;
					res=Byte.alloc(size);
				}else if(type.size && type.alloc){
					size=type.size;
					res=type.alloc();
				}
				var sa=sockaddr_in.alloc();
				var sz=UInt.alloc().update(16);
				var read=recvfrom(this.socket,res,size,0,sa,sz);
				if(type===Byte){
					res.count=read;
				}
				return(Object.extend(f?res.convert():res,{sender:new IPAddress(sa.addr,sa.port)}));
			}catch(e if e.code==10035){
				return(void(0));
			}finally{
				tv&&	tv.free();
				fd&&	fd.free();
				sa&&	sa.free();
				sz&&	sz.free();
			}
		},
		free:function(){
			this.socket && closesocket(this.socket);
		},
	});
	this.DNSError=DNSError;
	this.ConnectionTimeout=ConnectionTimeout;
	this.ConnectError=ConnectError;
	
	this.IPAddress=IPAddress;
	this.TCP=TCP;
	this.TCPServer=TCPServer;
	this.TCPStream=TCPStream;
	this.SSL=SSL;
	this.SSLStream=SSLStream;
	this.UDP=UDP;
	this.UDPServer=UDPServer;
	this.UDPSendStream=UDPSendStream;
})