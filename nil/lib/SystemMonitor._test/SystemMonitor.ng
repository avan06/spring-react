(function(){
	var NtQuerySystemInformation=ntdll.proc('NtQuerySystemInformation',[UInt,Pointer,UInt,Pointer],Int);
	var OpenProcess=				kernel32.proc('OpenProcess',[UInt,UInt,UInt],UInt,true);
	var CloseHandle=				kernel32.proc('CloseHandle',[UInt],Int);
	var NtQueryInformationProcess=	ntdll.proc('NtQueryInformationProcess',[UInt,UInt,Pointer,UInt,Pointer],UInt);
	
	var pGetDiffSPPI=Hex.decode('55 8b ec 83 ec 0c 56 6a 00 8b 45 08 6b c0 30 50 8b 4d 10 51 6a 08 ba ee ee ee ee ff d2 85 c0 0f 85 2a 01 00 00 c7 45 f4 00 00 00 00 eb 09 8b 45 f4 83 c0 01 89 45 f4 8b 4d f4 3b 4d 08 0f 8d 03 01 00 00 8b 55 f4 6b d2 30 8b 45 10 8b 0c 10 89 4d f8 8b 54 10 04 89 55 fc 8b 45 f4 6b c0 30 8b 4d 0c 8b 55 f8 2b 14 01 8b 75 fc 1b 74 01 04 8b 45 f4 6b c0 30 8b 4d 10 89 14 01 89 74 01 04 8b 55 f4 6b d2 30 8b 45 0c 8b 4d f8 89 0c 10 8b 4d fc 89 4c 10 04 8b 55 f4 6b d2 30 8b 45 10 8b 4c 10 08 89 4d f8 8b 54 10 0c 89 55 fc 8b 45 f4 6b c0 30 8b 4d 0c 8b 55 f8 2b 54 01 08 8b 75 fc 1b 74 01 0c 8b 45 f4 6b c0 30 8b 4d 10 89 54 01 08 89 74 01 0c 8b 55 f4 6b d2 30 8b 45 0c 8b 4d f8 89 4c 10 08 8b 4d fc 89 4c 10 0c 8b 55 f4 6b d2 30 8b 45 10 8b 4c 10 10 89 4d f8 8b 54 10 14 89 55 fc 8b 45 f4 6b c0 30 8b 4d 0c 8b 55 f8 2b 54 01 10 8b 75 fc 1b 74 01 14 8b 45 f4 6b c0 30 8b 4d 10 89 54 01 10 89 74 01 14 8b 55 f4 6b d2 30 8b 45 0c 8b 4d f8 89 4c 10 10 8b 4d fc 89 4c 10 14 e9 e8 fe ff ff b8 01 00 00 00 eb 04 eb 02 33 c0 5e 8b e5 5d c3');
	(new UInt.pointer(pGetDiffSPPI.inc(23))).update(ntdll.getStdCallFunction('NtQuerySystemInformation').valueOf());
	var GetDiffSPPI=(new CFunction(pGetDiffSPPI)).toFunction([Int,Pointer,Pointer],Int);
	var SysProcessorPerfInf=new Struct({
		idleTimeLow:		UInt,
		idleTimeHigh:		UInt,
		kernelTimeLow:		UInt,
		kernelTimeHigh:		UInt,
		userTimeLow:		UInt,
		userTimeHigh:		UInt,
		reserved1Low:		UInt,
		reserved1High:		UInt,
		reserved2Low:		UInt,
		reserved2High:		UInt,
		reserved3:			UInt,
		reserved4:			UInt,
	});
	var ProcessTime=new Struct({
		startTimeLow:	UInt,
		startTimeHigh:	UInt,
		endTimeLow:		UInt,
		endTimeHigh:	UInt,
		kernelTimeLow:	UInt,
		kernelTimeHigh:	UInt,
		userTimeLow:	UInt,
		userTimeHigh:	UInt,
	});
	var processorCount=System.processorCount||1;
	
	var CPU=new Class({
		__new__:function(){
			try{
				var s=UInt.alloc();
				this.count=processorCount;
				this.__sppiPrev__=SysProcessorPerfInf.alloc(this.count);
				this.__sppiDiff__=SysProcessorPerfInf.alloc(this.count);
				NtQuerySystemInformation(8,this.__sppiPrev__,48*this.count,null);
			}finally{
				free(s);
			}
		},
		free:function(){
			free(this.__sppiDiff__,this.__sppiPrev__);
		},
		get:function(multi){
			if(GetDiffSPPI(this.count,this.__sppiPrev__,this.__sppiDiff__)){
				
				var res=[];
				var d=this.__sppiDiff__;
				var tIdle=0, tKernel=0, tUser=0, tSystem=0, tWorking=0;
				for(var i=0,l=this.count;i<l;i++){
					var p=d.inc(i);
					var o={
						kernel:	p.kernelTimeLow,
						user:	p.userTimeLow,
						idle:	p.idleTimeLow,
					};
					tSystem+=(o.system=o.kernel+o.user);
					tWorking+=(o.working=o.system-o.idle);
					o.kernel-=o.idle;
					tKernel+=o.kernel;
					tUser+=o.user;
					tIdle+=o.idle;
					o.usage=Math.min(1,(o.working/o.system));
					res[i]=o;
				}
				res.total={
					kernel:tKernel,
					user:tUser,
					idle:tIdle,
					system:tSystem,
					working:tWorking,
					usage:Math.min(1,(tWorking/tSystem)),
				};
				return(multi?res:res.total);
			}
		},
		
	});
	
	var ProcessCPU=new Class({
		__new__:function(p){
			this.handle=OpenProcess(0x400,0,p.id);
			this.__buf__=ProcessTime.alloc();
			this.__prev__=this.__query__();
		},
		__query__:function(){
			var b=this.__buf__;
			if(0==NtQueryInformationProcess(this.handle,4,b,32,null)){
				return({
					t:(new Date()).getTime(),
					kl:b.kernelTimeLow,kh:b.kernelTimeHigh,
					ul:b.userTimeLow,uh:b.userTimeHigh,
				});
			}
		},
		free:function(){
			free(this.__buf__);
			CloseHandle(this.handle);
		},
		get:function(){
			var p=this.__prev__, c=this.__query__();
			if(c){
				this.__prev__=c;
				return((((c.kh-p.kh)*0x100000000+(c.kl-p.kl))+((c.uh-p.uh)*0x100000000+(c.ul-p.ul)))/((c.t-p.t)*10000*processorCount));
			}
		},
		
	});
	
	var iphlpapi=WinLibrary.load('iphlpapi.dll');
	var GetIfTable=iphlpapi.proc('GetIfTable',[Pointer,Pointer,UInt],UInt);
	var GetIfEntry=iphlpapi.proc('GetIfEntry',[Pointer],UInt);
	var IFRow=new Struct({
		name:				[WChar,256],
		index:				UInt,
		type:				UInt,
		mtu:				UInt,
		speed:				UInt,
		addrLen:			UInt,
		addr:				[Byte,8],
		adminStatus:		UInt,
		operStatus:			UInt,
		lastChange:			UInt,
		inOctets:			UInt,
		inUcastPkts:		UInt,
		inNUcastPkts:		UInt,
		inDiscards:			UInt,
		inErrors:			UInt,
		inUnknownProtos:	UInt,
		outOctets:			UInt,
		outUcastPkts:		UInt,
		outNUcastPkts:		UInt,
		outDiscards:		UInt,
		outErrors:			UInt,
		outQLen:			UInt,
		descriptionLength:	UInt,
		description:		[Byte,256],
	});
	var Network=new Class({
		__new__:function(){
			var s=this.__size__=UInt.alloc();
			GetIfTable(null,s,1);
			var buf=this.__table__=Byte.alloc(s.item());
			this.__lastTime__=(new Date()).getTime();
			GetIfTable(buf,s,1);
			var p=new UInt.pointer(buf);
			var count=this.__count__=buf.item();
			var st=new IFRow.pointer(p.inc(1));
			this.entries=[];
			for(var i=0;i<count;i++){
				var row=st.inc(i);
				if([6,23,71,131,144].contains(row.type)){
					this.entries.push({
						struct:row,
						input:row.inOctets,
						output:row.outOctets,
					});
				}
			}
		},
		free:function(){
			free(this.__table__,this.__size__);
		},
		get:function(multi){
			var t=(new Date()).getTime();
			var ms=t-this.__lastTime__;
			this.__lastTime__=t;
			GetIfTable(this.__table__,this.__size__,1);
			var res=[];
			var inTotal=0,outTotal=0;
			for(var i=0,a=this.entries,l=a.length;i<l;i++){
				var {struct,input,output}=a[i];
				var r=(a[i].input=struct.inOctets)-input;
				var w=(a[i].output=struct.outOctets)-output;
				res[i]={
					elapsed:ms,
					inputBytes:r,
					outputBytes:w,
					inputRate:r*1000/ms,
					outputRate:w*1000/ms,
				},
				inTotal+=res[i].inputBytes;
				outTotal+=res[i].outputBytes;
			}
			res.total={
				elapsed:ms,
				inputBytes:inTotal,
				outputBytes:outTotal,
				inputRate:inTotal*1000/ms,
				outputRate:outTotal*1000/ms,
			};
			return(multi?res:res.total);
		},
	});
	
	
	
	var BrowseDlgConfig=new Struct({
		flags:		UInt,
		hwnd:		UInt,
		source:		Pointer,
		path:		Pointer,
		pathLength:	UInt,
		callback:	Pointer,
		callbackArg:UInt,
		status:		UInt,
		level:		UInt,
		caption:	UInt,
		
	});
	var PDHCounterValue=new Struct({
		status:UInt,
		__padding__:UInt,
		value:	Double,
	});
	
	var pdh=WinLibrary.load('PDH.DLL');
	var PdhBrowseCounters=				pdh.proc('PdhBrowseCountersW',[BrowseDlgConfig],UInt);
	var PdhOpenQuery=					pdh.proc('PdhOpenQueryW',[WideString,UInt,Pointer],UInt);
	var PdhAddCounter=					pdh.proc('PdhAddCounterW',[UInt,WideString,UInt,Pointer],UInt);
	var PdhCollectQueryData=			pdh.proc('PdhCollectQueryData',[UInt],UInt);
	var PdhGetFormattedCounterValue=	pdh.proc('PdhGetFormattedCounterValue',[UInt,UInt,Pointer,Pointer],UInt);
	var PdhCloseQuery=					pdh.proc('PdhCloseQuery',[UInt],UInt);
	var PerformanceCounter=new Class({
		__class__:{
			browse:function(opt){
				try{
					var len=1024;
					var buf=BrowseDlgConfig.alloc();
					var path=WChar.alloc(len);
					buf.flags=0x30F;
					buf.path=path;
					buf.pathLength=len;
					buf.flags=47;
					buf.level=400;
					PdhBrowseCounters(buf);
					return(path.toString());
				}finally{
					free(path,buf);
				}
			},
		},
		
		__new__:function(path){
			if(path instanceof Array){
				this.__array__=true;
			}else{
				path=[path];
			}
			try{
				var p=UInt.alloc();
				PdhOpenQuery(null,0,p);
				this.__handle__=p.item();
				
				this.__counters__=[];
				for(var i=0,l=path.length;i<l;i++){
					PdhAddCounter(this.__handle__, path[i], 0, p);
					this.__counters__[i]=p.item();
				}
				this.__lastTime__=(new Date()).getTime();
				PdhCollectQueryData(this.__handle__);
				this.__value__=PDHCounterValue.alloc();
				
			}finally{
				free(p);
			}
		},
		free:function(){
			if(this.__handle__){
				PdhCloseQuery(this.__handle__,this.__value__);
				this.__handle__=null;
			}
		},
		
		get:function(){
			var t=(new Date()).getTime();
			var res=[];
			PdhCollectQueryData(this.__handle__);
			for(var i=0,a=this.__counters__,l=a.length;i<l;i++){
				PdhGetFormattedCounterValue(a[i],0x200,null,this.__value__);
				res[i]=this.__value__.value;
			}
			res.elapsed=t-this.__lastTime__;
			this.__lastTime__=t;
			return(this.__array__?res:res[0]);
		},
	});
	
	var InputIdle=new Class({
		__new__:function(){
			var _this=this;
			this.__Mouse__=require('Mouse').Mouse;
			this.__Keyboard__=require('Keyboard').Keyboard;
			this.__callback__=function(o){
				_this.lastInputVirtual=now();
				if(!o.injected){
					_this.lastInputPhysical=now();
				}
			};
			this.__Keyboard__.observe(['down','up'],this.__callback__);
			this.__Mouse__.observe(['move','lbuttonDown','lbuttonUp',
				'rbuttonDown','rbuttonUp','mbuttonDown','mbuttonUp',
				'x1buttonDown','x1buttonUp','x2buttonDown','x2buttonUp',
				'wheelUp','wheelDown','tiltRight','tiltLeft'],this.__callback__);
			
			this.lastInputPhysical=now();
			this.lastInputVirtual=now();
		},
		
		free:function(){
			this.__Keyboard__.unobserve(['down','up'],this.__callback__);
			this.__Mouse__.unobserve(['move','lbuttonDown','lbuttonUp',
				'rbuttonDown','rbuttonUp','mbuttonDown','mbuttonUp',
				'x1buttonDown','x1buttonUp','x2buttonDown','x2buttonUp',
				'wheelUp','wheelDown','tiltRight','tiltLeft'],this.__callback__);
		},
		get:function(p){
			if(p){
				return(now()-this.lastInputPhysical);
			}else{
				return(now()-this.lastInputVirtual);
			}
		},
		
	});
	
	
	this.CPU=CPU;
	this.ProcessCPU=ProcessCPU;
	this.Network=Network;
	this.PerformanceCounter=PerformanceCounter;
	this.InputIdle=InputIdle;
	
	
})