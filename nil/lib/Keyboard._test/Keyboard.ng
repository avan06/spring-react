(function(){
	var VirtualKeyCodes={
		"break":0x03,
		backspace:0x08,back:0x08,bs:0x08,
		tab:0x09,
		enter:0x0d,"return":0x0d,numenter:0x0d,
		shift:0x10,
		control:0x11,ctrl:0x11,
		alt:0x12,
		pause:0x13,
		capslock:0x14,
//		kana:0x15,
		junja:0x17,
		"final":0x18,
//		kanji:0x19,
		escape:0x1b,esc:0x1b,
		henkan:0x1c,convert:0x1c,
		muhenkan:0x1d,noconvert:0x1d,
		accept:0x1e,
		modechange:0x1f,
		space:0x20,
		pageup:0x21,pgup:0x21,
		pagedown:0x22,pgdn:0x22,
		end:0x23,
		home:0x24,
		left:0x25,
		up:0x26,
		right:0x27,
		down:0x28,
		select:0x29,
		print:0x2a,
		execute:0x2b,
		printscreen:0x2c,prtsc:0x2c,
		insert:0x2d,ins:0x2d,
		"delete":0x2e,del:0x2e,		numdelete:0x2e,numdel:0x2e,
		help:0x2f,
		lwin:0x5b,
		rwin:0x5c,
		app:0x5d,
		sleep:0x5f,
		num0:0x60,		numinsert:0x2d,numins:0x2d,
		num1:0x61,		numend:0x23,
		num2:0x62,		numdown:0x28,
		num3:0x63,		numpagedown:0x22,numpgdn:0x22,
		num4:0x64,		numleft:0x25,
		num5:0x65,
		num6:0x66,		numright:0x27,
		num7:0x67,		numhome:0x24,
		num8:0x68,		numup:0x26,
		num9:0x69,		numpageup:0x21,numpgup:0x21,
		nummulti:0x6a,
		numplus:0x6b,
//		numenter:0x6c,separator:0x6c,
		numminus:0x6d,
		numdot:0x6e,
		numdivide:0x6f,numdiv:0x6f,
		f1:0x70,
		f2:0x71,
		f3:0x72,
		f4:0x73,
		f5:0x74,
		f6:0x75,
		f7:0x76,
		f8:0x77,
		f9:0x78,
		f10:0x79,
		f11:0x7a,
		f12:0x7b,
		f13:0x7c,
		f14:0x7d,
		f15:0x7e,
		f16:0x7f,
		f17:0x80,
		f18:0x81,
		f19:0x82,
		f20:0x83,
		f21:0x84,
		f22:0x85,
		f23:0x86,
		f24:0x87,
		numlock:0x90,
		scrolllock:0x91,
		lshift:0xa0,
		rshift:0xa1,
		lcontrol:0xa2,
		lctrl:0xa2,
		rcontrol:0xa3,
		rctrl:0xa3,
		lalt:0xa4,
		ralt:0xa5,
		browser_back:0xa6,
		browser_forward:0xa7,
		browser_refresh:0xa8,
		browser_stop:0xa9,
		browser_search:0xaa,
		browser_favorites:0xab,
		browser_home:0xac,
		volume_mute:0xad,
		volume_down:0xae,
		volume_up:0xaf,
		media_next:0xb0,
		media_prev:0xb1,
		media_stop:0xb2,
		media_play:0xb3,
		launch_mail:0xb4,
		launch_media:0xb5,
		launch_app1:0xb6,
		launch_app2:0xb7,
		colon:0xba,
		semicolon:0xbb,
		comma:0xbc,
		minus:0xbd,
		period:0xbe,
		slash:0xbf,
		atmark:0xc0,at:0xc0,
		backslash:0xe2,
		kana:0xf2,
		hanzen:0xf3,
	};
	
	var ScanCodes={
		ctrl:		0x1d,lctrl:0x1d,
		shift:		0x2a,lshift:0x2a,
		rshift:		0x136,
		nummulti:	0x37,
		alt:		0x38,lalt:0x38,
		capslock:	0x3a,
		
		numhome:	0x47,					num7:0x47,
		numup:		0x48,					num8:0x48,
		numpageup:	0x49,numpgup:0x49,		num9:0x49,
		numminus:	0x4a,
		numleft:	0x4b,					num4:0x4b,
											num5:0x4c,
		numright:	0x4d,					num6:0x4d,
		numplus:	0x4e,
		numend:		0x4f,					num1:0x4f,
		numdown:	0x50,					num2:0x50,
		numpagedown:0x51,numpgdn:0x51,		num3:0x51,
		numinsert:	0x52,numins:0x52,		num0:0x52,
		numdelete:	0x53,numdel:0x53,		numdot:0x53,
		kana:		0x70,
		henkan:		0x79,convert:0x79,
		muhenkan:	0x7b,noconvert:0x7b,
		
		numenter:	0x11c,
		rctrl:		0x11d,
		numdivide:	0x135,numdiv:0x135,
		ralt:		0x138,
		numlock:	0x145,
		"break":	0x146,
		home:		0x147,
		up:			0x148,
		pageup:		0x149,pgup:0x149,
		left:		0x14b,
		right:		0x14d,
		end:		0x14f,
		down:		0x150,
		pagedown:	0x151,pgdn:0x151,
		insert:		0x152,ins:0x152,
		"delete":	0x153,del:0x153,
		lwin:		0x15b,
		rwin:		0x15c,
		app:		0x15d,
	};
	
	var MSG=new Struct({
		hwnd:		UInt,
		message:	UInt,
		wParam:		UInt,
		lParam:		UInt,
		time:		UInt,
		x:			Int,
		y:			Int,
	});
	var KBDLLHOOKSTRUCT=new Struct({
		vkCode:		UInt,
		scanCode:	UInt,
		flags:		UInt,
		time:		UInt,
		extraInfo:	UInt,
	});
	var KeyboardInput=new Struct({
		type:		UInt,
		vkCode:		UShort,
		scanCode:	UShort,
		flags:		UInt,
		time:		UInt,
		extraInfo:	UInt,
		res1:		UInt,
		res2:		UInt,
	});
	
	var LowLevelKeyboardProc=StdCallFunction.define([Int,UInt,UInt],Int);
	
	var
		BlockInput=				user32.proc('BlockInput',[Int],Int),
		keybd_event=			user32.proc('keybd_event',[UInt,UInt,UInt,UInt],Int),
		SendInput=				user32.proc('SendInput',[UInt,Pointer,UInt],Int),
		GetKeyState=			user32.proc('GetKeyState',[UInt],UInt),
		
		GetKeyboardType=		user32.proc('GetKeyboardType',[Int],Int),
		GetKeyNameText=			user32.proc('GetKeyNameTextW',[UInt,WideString,UInt],Int),
		MapVirtualKey=			user32.proc('MapVirtualKeyW',[UInt,UInt],UInt),
		VkKeyScan=				user32.proc('VkKeyScanW',[UInt],UInt),
		
		GetMessage=				user32.proc("GetMessageW",[MSG,UInt,UInt,UInt],Int,true),
		TranslateMessage=		user32.proc('TranslateMessage',[MSG],Int),
		DispatchMessage=		user32.proc('DispatchMessageW',[MSG],Int),
		PostThreadMessage=		user32.proc('PostThreadMessageW',[UInt,UInt,UInt,UInt],Int),
		
		SetWindowsHookEx=		user32.proc("SetWindowsHookExW",[UInt,LowLevelKeyboardProc,UInt,UInt],UInt),
		CallNextHookEx=			user32.proc("CallNextHookEx",[UInt,Int,UInt,UInt],Int),
		UnhookWindowsHookEx=	user32.proc("UnhookWindowsHookEx",[UInt],Int);
	
	var Keyboard=new Class({},EventMixin,{__class__:{
		codes:VirtualKeyCodes,
		reportError:Function.doNoting,
		__observeFirst__:function(){
			this.__observed__=true;
			this.__observerThread__=Thread.create(function(keyboard){
				try{
					var func=LowLevelKeyboardProc.from(function(code,wp,LP){
						if(LP && (code>=0) && keyboard.__observed__){
							try{
								var lp=new (KBDLLHOOKSTRUCT.pointer)(LP);
								var f=lp.flags;
								var vk=lp.vkCode;
								var sc=lp.scanCode | ((f&0x1)?0x100:0);
								var e=((wp==0x101)||(wp==0x105))?'up':'down';
								var k=new Key(vk,sc);
								var i=!!(lp.flags&0x10);
								
								if(!keyboard.fire(e,{key:k,injected:i}) || (keyboard.__observedKeys__[k.__instanceIdentifier__] && !k.fire(e,{injected:i}))){
									return(1);
								}
							}catch(e){
								if(e!==Main.exit){
									println(e);
									keyboard.reportError('event',e,obj);
								}
							}
						}
						return(CallNextHookEx(hHook,code,wp,LP));
					});
					var hHook=SetWindowsHookEx(13,func,Main.handle,0);
					var msg=MSG.alloc();
					while(GetMessage(msg,0,0,0)){
					}
				}catch(e){
					if((e!==Main.exit) && (msg.message!=0x12)){
						println(e);
						keyboard.reportError('messageLoop',e);
					}
				}finally{
					hHook&&	UnhookWindowsHookEx(hHook);
					func&&	func.free();
					msg&&	msg.free();
				}
			},[this]);
			Main.reside();
			Main.observe('exit',function(){Keyboard.unobserveAll()});
		},
		__unobserveLast__:function(){
			this.__observed__=false;
			PostThreadMessage(this.__observerThread__.id,0x12,0,0);
			this.__observerThread__.waitExit(200);
			this.__observerThread__.free();
			this.__observerThread__=null;
			Main.unreside();
		},
		__observedKeys__:{},
		__vkByChar__:{},
		__vkBySc__:{},
		__scByVk__:{},
		__nameByID__:{},
		
		block:function(){
			BlockInput(1);
			return(this);
		},
		unblock:function(){
			BlockInput(0);
			return(this);
		},
		sleep:function(ms){
			sleep(ms||0);
			return(this);
		},
		down:function(n){
			(new Key(n)).down();
			return(this);
		},
		up:function(n){
			(new Key(n)).up();
			return(this);
		},
		press:function(n,d){
			(new Key(n)).press(d);
			return(this);
		},
		turnOn:function(n){
			(new Key(n)).turnOn();
			return(this);
		},
		turnOff:function(n){
			(new Key(n)).turnOff();
			return(this);
		},
	}});
	
	var Key=new Class({},EventMixin,{
		__class__:{
			__firstInstances__:{},
		},
		__new__:function(vk,sc){
			if(typeof(vk)=='string'){
				if(vk.length==1){
					vk=Keyboard.__vkByChar__[vk]||(Keyboard.__vkByChar__[vk]=VkKeyScan(vk.charCodeAt(0))&0xFF)||vk;
				}else{
					sc=Keyboard.__scByVk__[vk]=ScanCodes[vk.toLowerCase()];
					vk=VirtualKeyCodes[vk.toLowerCase()]||vk;
				}
				if(typeof(vk)=='string'){
					throw(new Error('unknown key name: '+vk));
				}
			}else if(vk>0xFF){
				sc=vk>>16;
				vk=vk&0xFF;
			}
			this.code=vk		||Keyboard.__vkBySc__[sc]||(Keyboard.__vkBySc__[sc]=MapVirtualKey(sc,3));
			this.scanCode=sc	||Keyboard.__scByVk__[vk]||(Keyboard.__scByVk__[vk]=MapVirtualKey(vk,0));
			this.__instanceIdentifier__=this.id=(this.scanCode<<16)|this.code;
		},
		__observeFirst__:function(){
			this.__dummyEventHandler__=function(){};
			Keyboard.observe('dummy',this.__dummyEventHandler__);
			Keyboard.__observedKeys__[this.__instanceIdentifier__]=true;
		},
		__unobserveLast__:function(){
			if(this.__dummyEventHandler__){
				Keyboard.unobserve('dummy',this.__dummyEventHandler__);
				this.__dummyEventHandler__=null;
				Keyboard.__observedKeys__[this.__instanceIdentifier__]=false;
			}
		},
		get name(){
			if(!Keyboard.__nameByID__[this.__instanceIdentifier__]){
				try{
					var buf=WChar.alloc(64);
					GetKeyNameText(this.scanCode<<16,buf,63);
					Keyboard.__nameByID__[this.__instanceIdentifier__]=buf.toString();
				}finally{
					buf&&buf.free();
				}
			}
			return(Keyboard.__nameByID__[this.__instanceIdentifier__]);
		},
		get char(){
			var c=MapVirtualKey(this.code,2);
			return(c?String.fromCharCode(c):void(0));
		},
		get state()(!!(GetKeyState(this.code)&0xFF00)),
		get active()(!!(GetKeyState(this.code)&0xFF)),
		down:function(){
//			keybd_event(this.code, this.scanCode&0xFF, 0x8 | ((this.scanCode&0x100)?1:0), 0);
			try{
				var buf=KeyboardInput.alloc();
				buf.type=1;
				buf.vkCode=this.code;
				buf.scanCode=(this.scanCode&0xFF);
				buf.flags=0x0000 | ((this.scanCode&0x100)?1:0);
				SendInput(1,buf,28);
			}catch(e){
//				println(e);
			}finally{
				buf&&buf.free();
			}
		},
		up:function(){
//			keybd_event(this.code, this.scanCode&0xFF, 0xA | ((this.scanCode&0x100)?1:0), 0);
			try{
				var buf=KeyboardInput.alloc();
				buf.type=1;
				buf.vkCode=this.code;
				buf.scanCode=this.scanCode&0xFF;
				buf.flags=0x0002 | ((this.scanCode&0x100)?1:0);
				SendInput(1,buf,28);
			}catch(e){
//				println(e);
			}finally{
				buf&&buf.free();
			}
		},
		press:function(dur){
			this.down();
			if(dur){
				sleep(dur);
			}
			this.up();
		},
		turnOn:function(){
			if(!this.active){
				this.press();
			}
		},
		turnOff:function(){
			if(this.active){
				this.press();
			}
		},
	});
	
	this.Keyboard=Keyboard;
	this.Key=Key;
	this.VirtualKeyCodes=VirtualKeyCodes;
	this.ScanCodes=ScanCodes;
	
})