(function(){
	var CSVMixin=new Class({
		__class__:{
			fieldSeparator:",",
			stringify:function(){
				var res=new Array(arguments.length);
				for(var I=0,L=arguments.length;I<L;I++){
					var ary=arguments[I], a=new Array(ary.length);
					for(var i=0,l=ary.length;i<l;i++){
						a[i]=String(ary[i]).replace(/"/g,'""');
					}
					res[I]='"'+a.join('"'+this.fieldSeparator+'"')+'"';
				}
				return(res.join("\r\n"));
			},
		},
		get rows(){
			var index=0, cols=[], c=[],ls=this.lineSeparator,fs=this.constructor.fieldSeparator;
			for(let line in this.lines){
				if(line){
					for(var i=0, a=line.split(fs),l=a.length;i<l;i++){
						var col=a[i];
						if(c.length>0){
							c.push(((i==0)?(c.pop()+ls):"")+col);
							if(col.match(/"*$/)[0].length%2==1){
								cols.push(c.join(",").replace(/"("|$)/g,'$1'));
								c=[];
							}
						}else if(!col.match(/^"/)){
							cols.push(col);
						}else if((col=col.slice(1)).match(/"*$/)[0].length%2==0){
							c.push(col);
						}else{
							cols.push(col.replace(/"("|$)/g,'$1'));
						}
					}
					if(c.length==0){
						if(!(this.headerExists && index==0)){
							if(this.fields instanceof Array){
								for(var i=0,a=this.fields,l=a.length;i<l;i++){
									cols[a[i]]=cols[i];
								}
							}else{
								var i=0;
								for each(let [n,v] in Iterator(this.fields)){
									cols.__defineGetter__(n,let(f=v,idx=i++)(function()(f(this[idx]))));
								}
							}
							cols.index=index++;
							yield(cols);
						}
						cols=[];
					}
				}else if(c.length>0){
					c.push(c.pop()+ls);
				}
			}
		},
	});
	var CSV=new Class({},CSVMixin,{
		__new__:function(str,fields,headerExists,lineSeparator){
			this.source=str;
			this.fields=fields||this.constructor.fields||{};
			this.lineSeparator=lineSeparator||"\r\n";
			this.headerExists=!!headerExists;
		},
		get lines()($G(this.source.separate(/\r?\n/))),
	});
	var CSVFile=new Class(File,CSVMixin,{
		__new__:function(path,fields,headerExists,encoding,lineSeparator){
			this.fields=fields||this.constructor.fields||{};
			this.lineSeparator=lineSeparator||"\r\n";
			this.headerExists=!!headerExists;
			this.encoding=encoding;
			File.prototype.__new__.call(this,path);
		},
	});
	this.CSVMixin=CSVMixin;
	this.CSV=CSV;
	this.CSVFile=CSVFile;
	this.TSV=new Class(CSV,{__class__:{fieldSeparator:'	'}});
	this.TSVFile=new Class(CSVFile,{__class__:{fieldSeparator:'	'}});
	this.SSV=new Class(CSV,{__class__:{fieldSeparator:' '}});
	this.SSVFile=new Class(CSVFile,{__class__:{fieldSeparator:' '}});
})