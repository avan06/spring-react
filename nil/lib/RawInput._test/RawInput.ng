(function(){
	
	
	/*
	#define RIM_TYPEMOUSE       0
	#define RIM_TYPEKEYBOARD    1
	#define RIM_TYPEHID         2

	
	*/
	
	
	var RawInputDeviceList=new Struct({handle:UInt,type:UInt});
	
	var RawInputDevice=new Struct({
		page:		UShort,
		usage:		UShort,
		flags:		UInt,
		hwnd:		UInt,
	});
	
	
	
	var RawInputHeader=new Struct({
		type:		UInt,
		size:		UInt,
		hDevice:	UInt,
		wParam:		UInt,
	});
	
	var RawHidInput=new Struct({
		size:		UInt,
		count:		UInt,
		data:		[Byte,1],
	});
	var RawKeyboardInput=new Struct({
		makeCode:	UShort,
		vlags:		UShort,
		reserved:	UShort,
		vkey:		UShort,
		message:	UInt,
		exInfo:		UInt,
	});
	var RawMouseInput=new Struct({
		flags:			UShort,
		reserved:		UShort,
		buttonFlags:	UShort,
		buttonData:		UShort,
		rawButtons:		UInt,
		x:				Int,
		y:				Int,
		exInfo:			UInt,
	});
	
	
	
	var DeviceInfo=new Struct({
		size:			UInt,
		type:			UInt,
		data:			[UInt,8],
	});
	
	var HidInfo=new Struct({
		size:			UInt
		type:			UInt,
		vendorId:		UInt,
		productId:		UInt,
		version:		UInt,
		page:			UInt,
		usage:			UInt,
	});
	var KeyboadInfo=new Struct({
		size:			UInt
		type:			UInt,
		kbType:			UInt,
		kbSubType:		UInt,
		mode:			UInt,
		funcKeyCount:	UInt,
		ledCount:		UInt,
		keyCount:		UInt,
	});
	var MouseInfo=new Struct({
		size:			UInt
		type:			UInt,
		id:				UInt,
		buttonCount:	UInt,
		sampleRate:		UInt,
		hasTilt:		UInt,
	});
	
	
	
	
	
	
	var
		DefRawInputProc=				user32.proc('DefRawInputProc',[Pointer,UInt,UInt],UInt),
		GetRawInputBuffer=				user32.proc('GetRawInputBuffer',[Pointer,Pointer,UInt],UInt),
		GetRawInputData=				user32.proc('GetRawInputData',[UInt,UInt,Pointer,Pointer,UInt],UInt),
		GetRawInputDeviceInfo=			user32.proc('GetRawInputDeviceInfoW',[UInt,UInt,Pointer,Pointer],UInt,true),
		GetRawInputDeviceList=			user32.proc('GetRawInputDeviceList',[Pointer,Pointer,UInt],UInt,true),
		GetRegisteredRawInputDevices=	user32.proc('GetRegisteredRawInputDevices',[Pointer,Pointer,UInt],UInt),
		RegisterRawInputDevices=		user32.proc('RegisterRawInputDevices',[Pointer,UInt,UInt],UInt)
		;
	
	
	
	
	
	
	var Device=new Class({},EventMixin,{
		__class__:{
			get all(){
				try{
					var cnt=UInt.alloc();
					GetRawInputDeviceList(null,cnt,8);
					var buf=RawInputDeviceList.alloc(cnt.item());
					GetRawInputDeviceList(buf,cnt,8);
					for(var i=0,l=cnt.item();i<l;i++){
						var item=buf.item(i);
						yield(new ([RawMouse,RawKeyboard,RawHid][item.type])(item.handle));
					}
				}finally{
					cnt&&cnt.free();
					buf&&buf.free();
				}
			},
		},
		
		__new__:function(handle){
			this.handle=handle;
		},
		
		
		get name(){
			try{
				var s=UInt.alloc();
				GetRawInputDeviceInfo(this.handle,0x20000007,null,s);
				var b=WChar.alloc(s.item());
				GetRawInputDeviceInfo(this.handle,0x20000007,b,s);
				return(b.toString());
			}finally{
				s&&s.free();
				b&&b.free();
			}
		},
		
		
		
	});
	
	var RawHid=new Class(Device,{
		type:'hid',
		__class__:{
			get all(){
				for(var d in Device.all){
					if(d instanceof this){
						yield(d);
					}
				}
			},
		},
		__observe__:function(){
		},
		
	});
	
	var RawMouse=new Class(Device,{
		type:'mouse',
		__class__:{
			get all(){
				for(var d in Device.all){
					if(d instanceof this){
						yield(d);
					}
				}
			},
		},
		__observe__:function(){
		},
		
	});
	
	var RawKeyboard=new Class(Device,{
		type:'keyboard',
		__class__:{
			get all(){
				for(var d in Device.all){
					if(d instanceof this){
						yield(d);
					}
				}
			},
		},
		__observe__:function(){
		},
		
		
	});
	
	
	
	this.Device=Device;
	this.RawHid=RawHid;
	this.RawMouse=RawMouse;
	this.RawKeyboard=RawKeyboard;
	
	
	
})