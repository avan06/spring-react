(function(){
	
	var avifil=WinLibrary.load('Avifil32.dll');
	
	var
		AVIFileInit=			avifil.proc('AVIFileInit',[],Int),
		AVIFileOpen=			avifil.proc('AVIFileOpenW',[Pointer,WideString,UInt,UInt],UInt),
		AVIFileGetStream=		avifil.proc('AVIFileGetStream',[UInt,Pointer,UInt,Int],UInt),
		AVIFileInfo=			avifil.proc('AVIFileInfoW',[UInt,Pointer,Int],UInt),
		AVIFileRelease=			avifil.proc('AVIFileRelease',[UInt],Int),
		AVIStreamInfo=			avifil.proc('AVIStreamInfoW',[UInt,Pointer,Int],UInt),
		AVIStreamRelease=		avifil.proc('AVIStreamRelease',[UInt],Int),

		AVIStreamGetFrameOpen=	avifil.proc('AVIStreamGetFrameOpen',[UInt,Pointer],UInt),
		AVIStreamGetFrame=		avifil.proc('AVIStreamGetFrame',[UInt,Int],UInt),
		AVIStreamGetFrameClose=	avifil.proc('AVIStreamGetFrameClose',[UInt],UInt),
	var_end;
	
	
	var AVIFileInformation=new Struct({
		maxBPS:				UInt,
		flags:				UInt,
		caps:				UInt,
		streams:			UInt,
		suggestedBufferSize:UInt,
		width:				UInt,
		height:				UInt,
		scale:				UInt,
		rate:				UInt,
		length:				UInt,
		editCount:			UInt,
		fileType:			[WChar,64],
	});
	
	var AVIStreamInformation=new Struct({
		type:					UInt,
		handler:				UInt,
		flags:					UInt,
		caps:					UInt,
		priority:				UShort,
		language:				UShort,
		scale:					UInt,
		rate:					UInt,
		start:					UInt,
		length:					UInt,
		initialFrames:			UInt,
		suggestedBufferSize:	UInt,
		quality:				UInt,
		sampleSize:				UInt,
		left:					Int,
		top:					Int,
		width:					Int,
		height:					Int,
		editCount:				UInt,
		formatChangeCount:		UInt,
		name:					[WChar,64],
	});
	
	
	var Result=require('COM').Result;
	
	AVIFileInit();
	
	var VideoFile=new Class({
		__class__:{
			open:function(fp){
				try{
					var pfp=WideString.from(fp);
					var p=UInt.alloc();
					var r=AVIFileOpen(p,pfp,0x20,0);
					if(r==0){
						return(new this(p.item()));
					}else{
						throw(new Error(({
							0x80040154:'Handler class for this file type is not registered',
						})[r]));
					}
				}finally{
//					free(p);
				}
			},
		},
		__new__:function(handle){
			this.handle=handle;
			try{
				var inf=AVIFileInformation.alloc();
				var r=AVIFileInfo(this.handle,inf,inf.size);
				if(r==0){
					this.width=inf.width;
					this.height=inf.height;
					this.scale=inf.scale;
					this.rate=inf.rate;
					this.streamCount=inf.streams;
				}
			}finally{
				free(inf);
			}
		},
		
		free:function(){
			AVIFileRelease(this.handle);
		},
		
		openVideo:function(idx){
			try{
				var p=UInt.alloc();
				if(AVIFileGetStream(this.handle,p,0x73646976,0)==0){
					return(new VideoStream(p.item()));
				}
			}finally{
				free(p);
			}
		},
	});
	
	
	var BitmapInfo=new Struct({
		size:			UInt,
		width:			Int,
		height:			Int,
		planes:			UShort,
		bpp:			UShort,
		compression:	UInt,
		sizeImage:		UInt,
		xPPM:			Int,
		yPPM:			Int,
		colorUsed:		UInt,
		colorImportant:	UInt,
	});

	var Image=require('Image').Image;
	var VideoStream=new Class({
		__new__:function(handle){
			this.handle=handle;
			try{
				var inf=AVIStreamInformation.alloc();
				var r=AVIStreamInfo(this.handle,inf,inf.size);
				
				var bmi=BitmapInfo.alloc();
				
				if(r==0){
					this.width=inf.width;
					this.height=inf.height;
					this.scale=inf.scale;
					this.rate=inf.rate;
					this.fps=this.rate/this.scale;
					this.length=inf.length;
					this.duration=this.length/this.fps;
					
					bmi.size=BitmapInfo.size;
					bmi.planes=1;
					bmi.bpp=32;
					bmi.width=this.width;
					bmi.height=this.height;
					this.handle2=AVIStreamGetFrameOpen(this.handle,bmi);
				}else{
					Result.check(r,"");
				}
			}finally{
				free(inf,bmi);
			}
		},
		free:function(){
			AVIStreamGetFrameClose(this.handle2);
			AVIStreamRelease(this.handle);
		},
		getFrame:function(idx){
			var bmi=AVIStreamGetFrame(this.handle2,idx||0);
			if(bmi){
				return(Image.fromDIB(bmi));
			}else{
				throw(Error("Video: failed to get frame"));
			}
		},
	});
	
	
	
	
	this.VideoFile=VideoFile;
	
})